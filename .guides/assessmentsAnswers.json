[
 {
  "taskId": "fill-in-the-blanks-1727359970",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "test-2414713005",
  "points": 0,
  "results": []
 },
 {
  "taskId": "test-326602571",
  "points": 0,
  "results": [
   {
    "guidance": "Here is one possible solution:\n\n```java\nimport java.util.*;\n\nclass Band {\n  private String name;\n  private String genre;\n  private String[] members;\n  \n  public Band(String n, String g, String[]m) {\n    name = n;\n    genre = g;\n    members = m;\n  }\n  \n  //add class definitions below this line\n  \n  public String toString() {\n    String nameAttribute = \"name=\" + name + \", \";\n    String genreAttribute = \"genre=\" + genre + \", \";\n    String membersAttribute = \"members=\" + Arrays.toString(members);\n    return getClass().getName() + \"[\" + nameAttribute + genreAttribute + membersAttribute + \"]\";\n  }\n\n  //add method definition above this line\n}\n\npublic class Exercise2 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n    \n    String[] members = {\"Jerry\", \"Bob\", \"Mickey\", \"Bill\", \"Phil\", \"Pigpen\"};\n    Band dead = new Band(\"The Grateful Dead\", \"rock'n roll\", members);\n    System.out.println(dead);\n\n    //add code above this line\n    \n  }\n}\n```\n\n* Previous examples of the `toString` method have a single line of code as the return statement. For legibility purposes, the string is broken up across several variables.\n* Set `nameAttribute` to `\"name=\"` followed by the attribute `name`. Don't forget the comma.\n* Set `genreAttribute` to `\"genre=\"` followed by the attribute `genre`. Don't forget the comma.\n* Set `membersAttribute` to `\"members=\"`. If you add the `members` attribute, Java will not print the elements of the array. Instead, use `Array.toString(members)`. You do not need a comma since this is the last attribute.\n* Use `getClass().getName()` to get the object type followed by a `\"[\"`, `nameAttribute`, `genreAttribute`, `membersAttribute`, and finally a `\"]\"`.",
    "format": null,
    "code": 121,
    "output": "\n/home/codio/workspace/code/advanced/exercise2/Exercise2.java:47: error: class Exercise1 is public, should be declared in a file named Exercise1.java\npublic class Exercise1 {  \n       ^\n.guides/secure/advanced/Exercise2Tester.java:9: error: cannot find symbol\n    Band band = new Band(\"Pink Floyd\", \"rock'n roll\", members);\n    ^\n  symbol:   class Band\n  location: class Exercise2Tester\n.guides/secure/advanced/Exercise2Tester.java:9: error: cannot find symbol\n    Band band = new Band(\"Pink Floyd\", \"rock'n roll\", members);\n                    ^\n  symbol:   class Band\n  location: class Exercise2Tester\n.guides/secure/advanced/Exercise2Tester.java:19: error: cannot find symbol\n    Band band = new Band(\"Wu-Tang Clan\", \"rap\", members);\n    ^\n  symbol:   class Band\n  location: class Exercise2Tester\n.guides/secure/advanced/Exercise2Tester.java:19: error: cannot find symbol\n    Band band = new Band(\"Wu-Tang Clan\", \"rap\", members);\n                    ^\n  symbol:   class Band\n  location: class Exercise2Tester\n5 errors\n\nCompile sources problems",
    "timestamp": "2021-04-22T19:37:19.599Z",
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "test-3997253090",
  "points": 0,
  "results": []
 },
 {
  "taskId": "test-1539171007",
  "points": 0,
  "results": []
 },
 {
  "taskId": "test-1581249114",
  "points": 20,
  "results": [
   {
    "guidance": null,
    "format": null,
    "code": 0,
    "output": "<b>3</b> tests, <b>0</b> failures, <b>0.161s</b> duration\n\n<strong>Exercise5Tester</strong>\ncheckTotal, 0.001s, <span style=\"color: green\">passed</span>\ncheckNumItems, 0.0s, <span style=\"color: green\">passed</span>\ncheckToString, 0.047s, <span style=\"color: green\">passed</span>",
    "timestamp": "2021-04-08T23:00:16.382Z",
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "code": 0,
    "output": "<b>3</b> tests, <b>1</b> failures, <b>0.173s</b> duration\n\n<strong>Exercise5Tester</strong>\ncheckTotal, 0.001s, <span style=\"color: green\">passed</span>\ncheckNumItems, 0.0s, <span style=\"color: green\">passed</span>\ncheckToString, 0.054s, <span style=\"color: red\">failed</span>\n<div style=\"padding-left: 20px;\">ShoppingCart[items=[Item[name=laptop, price=1200.0, quantity=1, subtotal=1200.0], Item[name=monitor, price=250.0, quantity=2, subtotal=500.0], Item[name=keyboard, price=50.0, quantity=1, subtotal=50.0], Item[name=mouse, price=15.0, quantity=1, subtotal=15.0]], total=1765.0] expected:<ShoppingCart[items=[Item[name=laptop, price=1200.0, quantity=1], Item[name=monitor, price=250.0, quantity=2], Item[name=keyboard, price=50.0, quantity=1], Item[name=mouse, price=15.0, quantity=1]], total=1765.0]> but was:<ShoppingCart[items=[[Item[name=laptop, price=1200.0, quantity=1, subtotal=1200.0], Item[name=monitor, price=250.0, quantity=2, subtotal=500.0], Item[name=keyboard, price=50.0, quantity=1, subtotal=50.0], Item[name=mouse, price=15.0, quantity=1, subtotal=15.0]]], total=1765.0]></div>",
    "timestamp": "2021-04-08T22:57:02.403Z",
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "code": 0,
    "output": "<b>3</b> tests, <b>1</b> failures, <b>0.172s</b> duration\n\n<strong>Exercise5Tester</strong>\ncheckTotal, 0.001s, <span style=\"color: green\">passed</span>\ncheckNumItems, 0.0s, <span style=\"color: green\">passed</span>\ncheckToString, 0.055s, <span style=\"color: red\">failed</span>\n<div style=\"padding-left: 20px;\">String representation did not match. expected:<ShoppingCart[items=[Item[name=laptop, price=1200.0, quantity=1], Item[name=monitor, price=250.0, quantity=2], Item[name=keyboard, price=50.0, quantity=1], Item[name=mouse, price=15.0, quantity=1]], total=1765.0]> but was:<ShoppingCart[items=[[Item[name=laptop, price=1200.0, quantity=1, subtotal=1200.0], Item[name=monitor, price=250.0, quantity=2, subtotal=500.0], Item[name=keyboard, price=50.0, quantity=1, subtotal=50.0], Item[name=mouse, price=15.0, quantity=1, subtotal=15.0]]], total=1765.0]></div>",
    "timestamp": "2021-04-08T22:56:27.331Z",
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "code": 0,
    "output": "<b>3</b> tests, <b>1</b> failures, <b>0.209s</b> duration\n\n<strong>Exercise5Tester</strong>\ncheckTotal, 0.001s, <span style=\"color: green\">passed</span>\ncheckNumItems, 0.0s, <span style=\"color: green\">passed</span>\ncheckToString, 0.059s, <span style=\"color: red\">failed</span>\n<div style=\"padding-left: 20px;\">ShoppingCart[items=[Item[name=laptop, price=1200.0, quantity=1, subtotal=1200.0], Item[name=monitor, price=250.0, quantity=2, subtotal=500.0], Item[name=keyboard, price=50.0, quantity=1, subtotal=50.0], Item[name=mouse, price=15.0, quantity=1, subtotal=15.0]], total=1765.0] expected:<ShoppingCart[items=[Item[name=laptop, price=1200, quantity=1], Item[name=monitor, price=250, quantity=2], Item[name=keyboard, price=50, quantity=1], Item[name=mouse, price=15, quantity=1], total=1765]]> but was:<ShoppingCart[items=[[Item[name=laptop, price=1200.0, quantity=1, subtotal=1200.0], Item[name=monitor, price=250.0, quantity=2, subtotal=500.0], Item[name=keyboard, price=50.0, quantity=1, subtotal=50.0], Item[name=mouse, price=15.0, quantity=1, subtotal=15.0]], total=1765.0]]></div>",
    "timestamp": "2021-04-08T22:55:32.759Z",
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "code": 0,
    "output": "<b>3</b> tests, <b>1</b> failures, <b>0.16s</b> duration\n\n<strong>Exercise5Tester</strong>\ncheckTotal, 0.001s, <span style=\"color: green\">passed</span>\ncheckNumItems, 0.0s, <span style=\"color: green\">passed</span>\ncheckToString, 0.053s, <span style=\"color: red\">failed</span>\n<div style=\"padding-left: 20px;\">String representation did not match. expected:<ShoppingCart[items=[Item[name=laptop, price=1200, quantity=1], Item[name=monitor, price=250, quantity=2], Item[name=keyboard, price=50, quantity=1], Item[name=mouse, price=15, quantity=1], total=1765]]> but was:<ShoppingCart[items=[[Item[name=laptop, price=1200.0, quantity=1, subtotal=1200.0], Item[name=monitor, price=250.0, quantity=2, subtotal=500.0], Item[name=keyboard, price=50.0, quantity=1, subtotal=50.0], Item[name=mouse, price=15.0, quantity=1, subtotal=15.0]], total=1765.0]]></div>",
    "timestamp": "2021-04-08T22:51:19.252Z",
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "code": 0,
    "output": "<b>3</b> tests, <b>2</b> failures, <b>0.26s</b> duration\n\n<strong>Exercise5Tester</strong>\ncheckTotal, 0.001s, <span style=\"color: green\">passed</span>\ncheckNumItems, 0.006s, <span style=\"color: red\">failed</span>\n<div style=\"padding-left: 20px;\">Number of items did not match. expected:<5> but was:<1515></div>checkToString, 0.093s, <span style=\"color: red\">failed</span>\n<div style=\"padding-left: 20px;\">String representation did not match. expected:<ShoppingCart[items=[Item[name=laptop, price=1200, quantity=1], Item[name=monitor, price=250, quantity=2], Item[name=keyboard, price=50, quantity=1], Item[name=mouse, price=15, quantity=1], total=1765]]> but was:<ShoppingCart[items=[[Item[name=laptop, price=1.0, quantity=1200, subtotal=1200.0], Item[name=monitor, price=2.0, quantity=250, subtotal=500.0], Item[name=keyboard, price=1.0, quantity=50, subtotal=50.0], Item[name=mouse, price=1.0, quantity=15, subtotal=15.0]], total=1765.0]]></div>",
    "timestamp": "2021-04-08T22:50:06.181Z",
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "code": 0,
    "output": "<b>3</b> tests, <b>2</b> failures, <b>0.332s</b> duration\n\n<strong>Exercise5Tester</strong>\ncheckTotal, 0.001s, <span style=\"color: green\">passed</span>\ncheckNumItems, 0.003s, <span style=\"color: red\">failed</span>\n<div style=\"padding-left: 20px;\">Number of items did not match. expected:<5> but was:<4></div>checkToString, 0.033s, <span style=\"color: red\">failed</span>\n<div style=\"padding-left: 20px;\">String representation did not match. expected:<ShoppingCart[items=[Item[name=laptop, price=1200, quantity=1], Item[name=monitor, price=250, quantity=2], Item[name=keyboard, price=50, quantity=1], Item[name=mouse, price=15, quantity=1], total=1765]]> but was:<ShoppingCart[items=[[Item[name=laptop, price=1.0, quantity=1200, subtotal=1200.0], Item[name=monitor, price=2.0, quantity=250, subtotal=500.0], Item[name=keyboard, price=1.0, quantity=50, subtotal=50.0], Item[name=mouse, price=1.0, quantity=15, subtotal=15.0]], total=1765.0]]></div>",
    "timestamp": "2021-04-08T22:47:05.187Z",
    "state": "pass"
   },
   {
    "guidance": null,
    "format": null,
    "code": 121,
    "output": "\n.guides/secure/advanced/Exercise5Tester.java:35: error: variable expected is already defined in method checkTotal()\n    double expected = cart.getTotal();\n           ^\n.guides/secure/advanced/Exercise5Tester.java:37: error: cannot find symbol\n    assertEquals(feedback, expected, actual, 0.01);\n                                     ^\n  symbol:   variable actual\n  location: class Exercise5Tester\n.guides/secure/advanced/Exercise5Tester.java:43: error: variable expected is already defined in method checkNumItems()\n    int expected = cart.getNumItems();\n        ^\n.guides/secure/advanced/Exercise5Tester.java:45: error: cannot find symbol\n    assertEquals(feedback, expected, actual);\n                                     ^\n  symbol:   variable actual\n  location: class Exercise5Tester\n4 errors\n\nCompile sources problems",
    "timestamp": "2021-04-08T22:46:15.872Z",
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "test-485920902",
  "points": 0,
  "results": []
 },
 {
  "taskId": "test-2016365405",
  "points": 20,
  "results": [
   {
    "guidance": "Here is one possible solution:\n\n```java\nabstract class Vehicle {\n  public abstract double travel(double time);\n}\n\n//add class definitions below this line\n\nclass Airplane extends Vehicle {\n  private double speed;\n  \n  public Airplane(double s) {\n    speed = s;\n  }\n  \n  public double travel(double time) {\n    return speed * time;\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise2 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Airplane a = new Airplane(550.0);\n    System.out.println(a.travel(2));\n    System.out.println(a.travel(3.15));\n    System.out.println(a.travel(10.63));\n    \n    //add code above this line\n  }\n}\n```\n\n* Have `Airplane` extend the `Vehicle` class.\n* Since `distance` is an abstract method, the `Airplane` class must override this method.\n* The code sample that initiates an `Airplane` object shows that this class takes a value for the constructor.\n* Calculating distance is done by multiplying speed of the vehicle by time it is traveling. The `distance` method takes time as an argument, so the value representing speed is contained within the object (the value passed to the constructor).\n* The constructor for the `Airplane` class takes a double which represents speed.\n* The `distance` method returns `time` multiplied by the valued passed to the constructor.",
    "format": null,
    "code": 0,
    "output": "<b>4</b> tests, <b>0</b> failures, <b>0.079s</b> duration\n\n<strong>Exercise2Tester</strong>\ncheckOutput1, 0.001s, <span style=\"color: green\">passed</span>\ncheckOutput2, 0.0s, <span style=\"color: green\">passed</span>\ncheckOutput3, 0.0s, <span style=\"color: green\">passed</span>\ncheckInheritance, 0.0s, <span style=\"color: green\">passed</span>",
    "timestamp": "2021-04-13T15:20:14.179Z",
    "state": "pass"
   }
  ]
 },
 {
  "taskId": "test-1537667893",
  "points": 0,
  "results": [
   {
    "guidance": "Here is one possible solution:\n\n```java\nimport java.util.ArrayList;\nimport java.io.*;\n\nclass Substitute {\n  private String sourceFile;\n  private String answerFile;\n  private ArrayList<String[]> wordsList;\n  private String wordsString;\n  \n  public Substitute(String source, String answer) {\n    sourceFile = source;\n    answerFile = answer;\n    wordsList = new ArrayList<String[]>();\n    wordsString = null;\n  }\n  \n  public ArrayList<String[]> getWordsList() {\n    return wordsList;\n  }\n  \n  public String getWordsString() {\n    return wordsString;\n  }\n  \n  public String getAnswerFile() {\n    return answerFile;\n  }\n  \n  /**\n   * Reads the text file stored in sourceFile and converts it to an\n   * ArrayList of arrays of strings. Each array represents a sentence,\n   * and element represents a word of the sentence. This ArrayList of\n   * arrays of strings is stored in the attribute wordsList.\n   */\n  public void stringToList() {\n    try {\n      ArrayList<String> lines = new ArrayList<String>();\n      BufferedReader reader = new BufferedReader(new FileReader(sourceFile));\n      String currentLine = reader.readLine();\n      while(currentLine != null) {\n        lines.add(currentLine);\n        currentLine = reader.readLine();\n      }\n      reader.close();\n      for (String line : lines) {\n        wordsList.add(line.split(\" \"));\n      }\n    } catch (IOException e) {\n      System.out.println(e);\n    }\n  }\n  \n  /**\n   * Takes the ArrayList of arrays of strings and coverts it back into\n   * a single string with newline characters. This string is stored\n   * in the wordsString attribute.\n   */\n  public void listToString() {\n    ArrayList lines = new ArrayList<String>();\n    for (String[] line : wordsList) {\n      lines.add(String.join(\" \", line));\n    }\n    wordsString = String.join(\"\\n\", lines);\n  }\n  \n  /**\n   * Calls stringToList. Then iterates through the ArrayList of arrays of\n   * strings. If it is the fifth word, the element is replaces with\n   * \"HELLO\". This method calls listToString and prints the results.\n   */\n  public void swapWords() {\n    stringToList();\n    for (String[] line : wordsList) {\n      for (int i = 0; i < line.length; i++) {\n        if ((i + 1) % 5 == 0) {\n          line[i] = \"HELLO\";\n        }\n      }\n    }\n    listToString();\n    System.out.println(wordsString);\n  }\n}\n\n//add class definitions below this line\n\nclass Stars extends Substitute {\n  public Stars(String source, String answer) {\n    super(source, answer);\n  }\n  \n  private String createStars(String s) {\n    String stars = \"\";\n    for (int i = 0; i < s.length(); i++) {\n      stars += \"*\";\n    }\n    return stars;\n  }\n  \n  public void swapWords() {\n    stringToList();\n    for (String[] line : getWordsList()) {\n      for (int i = 0; i < line.length; i++) {\n        if ((i + 1) % 3 == 0) {\n          line[i] = createStars(line[i]);\n        }\n      }\n    }\n    listToString();\n    try {\n      BufferedWriter writer = new BufferedWriter(new FileWriter(getAnswerFile()));\n      writer.write(getWordsString());\n      writer.close();\n    } catch (IOException e) {\n      System.out.println(e);\n    } \n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise5 {  \n  public static void main(String[] args) {\n    String source = \"/home/codio/workspace/code/polymorphism/exercise5/words.txt\";\n    String answer = \"/home/codio/workspace/code/polymorphism/exercise5/answer.txt\";\n    \n    //add code below this line\n\n    Stars s = new Stars(source, answer);\n    s.swapWords();\n    \n    //add code above this line\n  }\n}\n```\n\n* The `swapWords` method needs to call the constructor of the superclass. Use the `super` keyword and pass it the required parameters.\n```java\n  public Stars(String source, String answer) {\n    super(source, answer);\n  }\n```\n* The `swapWords` method is almost the same as in the `Substitute` class except that you are going to change every third word. Use `% 3` instead of `% 5`. In addition, you do not want to replace the word with `HELLO` but a number of `*`. This example calls a helper method that will return the correct number of `*`.\n```java\n        if ((i + 1) % 3 == 0) {\n          line[i] = createStars(line[i]);\n        }\n```\n* This helper method takes the word to be replaced as an argument. Create an empty string that will contain the asterisks. Iterate a for loop as many times as the length of the word to be replaced. Add an asterisk to the string variable every time the loop runs. Finally, return the string variable with the asterisks. \n```java\n  private String createStars(String s) {\n    String stars = \"\";\n    for (int i = 0; i < s.length(); i++) {\n      stars += \"*\";\n    }\n    return stars;\n  }\n```",
    "format": null,
    "code": 121,
    "output": "\n.guides/secure/polymorphism/Exercise5Tester.java:36: error: cannot find symbol\n    Stars studentTest = new Stars(testText, answerText);\n    ^\n  symbol:   class Stars\n  location: class Exercise5Tester\n.guides/secure/polymorphism/Exercise5Tester.java:36: error: cannot find symbol\n    Stars studentTest = new Stars(testText, answerText);\n                            ^\n  symbol:   class Stars\n  location: class Exercise5Tester\n2 errors\n\nCompile sources problems",
    "timestamp": "2021-04-13T15:14:13.264Z",
    "state": "fail"
   }
  ]
 }
]