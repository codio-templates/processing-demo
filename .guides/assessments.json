[
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3985050060",
  "source": {
   "name": "reading question built-in objects",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "A <<<class>>> is the blueprint used to create object.\nAn <<<object>>> a version of a class used by programmers.\nAn object is said to be an <<<instance>>> of a class.\n<<<Instantiation>>> is when an object is created from a class.",
   "distractors": "",
   "guidance": "A class is the blueprint used to create object.\nAn object a version of a class used by programmers.\nAn object is said to be an instance of a class.\nInstantiation is when an object is created from a class.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Vocabulary"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes"
     }
    ],
    "files": [
     "code/introObjects/BuiltIn.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/BuiltIn.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define class, object, instance, and instantiation",
   "tokens": {
    "blank": [
     "class",
     "object",
     "instance",
     "Instantiation"
    ],
    "text": [
     "A ",
     0,
     " is the blueprint used to create object.\nAn ",
     0,
     " a version of a class used by programmers.\nAn object is said to be an ",
     0,
     " of a class.\n",
     0,
     " is when an object is created from a class."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2424555517",
  "source": {
   "name": "reading question user-define objects",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Pitcher {\n    double era;\n}\n```\n\nSelect the code snippet below that instantiates an object of type `Pitcher` and sets the `era` attribute to 2.93.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "6f82b656-dd40-4f8e-0ed3-54e569ec19dc",
     "correct": true,
     "answer": "Pitcher pedro = new Pitcher();\npedro.era = 2.93;"
    },
    {
     "_id": "ae1d8ae0-4f72-a2ed-bc01-072df372c465",
     "correct": false,
     "answer": "Pitcher pedro = Pitcher();\npedro.era = 2.93;"
    },
    {
     "_id": "d2cb4503-1c6c-a242-858c-21cf602a2902",
     "correct": false,
     "answer": "Pitcher pedro = new Pitcher();\nera = 2.93;"
    },
    {
     "_id": "7c6342b5-1b89-ddc0-89a0-a1fe468b5c3f",
     "correct": false,
     "answer": "pedro = new Pitcher();\npedro.era = 2.93;"
    }
   ],
   "guidance": "When instantiating an object, you start by giving the object a type. In this case, the type is `Pitcher`. Give the object a name followed by the assignment operator. Use the `new` keyword and the class name to create a new object of type `Pitcher`.\n\n```java\nPitcher pedro = new Pitcher();\n```\n\nTo access a class attribute, use dot notation. That means using the object's name (`pedro`) followed by a `.`, and the use the name of the attribute. Assign the value `2.93` to the attribute like you would a variable.\n\n```java\npedro.era = 2.93;\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "User-Defined Objects"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/UserDefined.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/UserDefined.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify how to instantiate an object and modify an attribute"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2364413442",
  "source": {
   "name": "the constructor reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich code snippet below would be the constructor for the `Dog` class?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "8f697b72-01f0-9016-b2ea-b9641ec53d5d",
     "correct": true,
     "answer": "`Dog()`"
    },
    {
     "_id": "561aa89c-be55-eb26-a2c5-10596bc16443",
     "correct": false,
     "answer": "`class Dog`"
    },
    {
     "_id": "e1b0f7f3-a211-6d68-4169-38d14fa72c84",
     "correct": false,
     "answer": "`dog()`"
    },
    {
     "_id": "60928bc6-45f7-e2cb-968b-20d8340f9274",
     "correct": false,
     "answer": "`constructor`"
    }
   ],
   "guidance": "In Java, the constructor uses the name of the class (capitalization must match) and a set of parentheses. Since the class is `Dog`, the constructor would be:\n\n```java\nDog()\n```\n\nThe constructor does not use the keyword `class`. In addition, the spelling of the constructor must match that of the class. Since the class starts with a `D`, so must the constructor.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Object Constructors"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Constructor.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Constructor.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify the constructor"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3801306128",
  "source": {
   "name": "constructor and parameters reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following object instantiation:\n\n```java\nPerson p = new Person(18, \"Dallas\");\n```\n\nWhich code snippet below represents the constructor needed for this instantiation?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "f998fa0b-63a0-3e7d-57f2-f2af4d56b15e",
     "correct": true,
     "answer": "`Person(int age, String homeTown)`"
    },
    {
     "_id": "33db92a7-565b-07a6-0280-95e5e5a133e8",
     "correct": false,
     "answer": "`Person(age, homeTown)`"
    },
    {
     "_id": "54ea49a0-8f92-da37-e4d5-ebcdfd4f7c04",
     "correct": false,
     "answer": "`Person(String homeTown, int age)`"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nPerson(int age, String homeTown)\n```\n\nEach parameter for the constructor requires a type. In addition, the order of the parameters is important. Since the object instantiation had `18` before `\"Dallas\"`, the constructor must do the same.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Constructor and Parameters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/ConstructorParameters.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/ConstructorParameters.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the constructor based on object instatiation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-359646314",
  "source": {
   "name": "reading question class attributes",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "A <<<class>>> attribute is an attribute whose value is shared by all instances of a class.\nAn <<<object>>> attribute is an attribute whose value is independent of other instances of a class.",
   "distractors": "variable\nconstant",
   "guidance": "A class attribute is an attribute whose value is shared by all instances of a class.\nAn object attribute is an attribute whose value is independent of other instances of a class.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Class Attributes"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/ClassAttributes.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/ClassAttributes.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between a class attribute and an object attribute",
   "tokens": {
    "blank": [
     "class",
     "object"
    ],
    "text": [
     "A ",
     0,
     " attribute is an attribute whose value is shared by all instances of a class.\nAn ",
     0,
     " attribute is an attribute whose value is independent of other instances of a class."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2232783722",
  "source": {
   "name": "reading question shallow vs deep copy",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "A <<<deep>>> copy is when Java makes a copy of the object and its attributes.\nA <<<shallow>>> copy is when Java makes a copy of the object, but the attributes are shared.",
   "distractors": "small\nmedium\nfake",
   "guidance": "A deep copy is when Java makes a copy of the object and its attributes.\nA shallow copy is when Java makes a copy of the object, but the attributes are shared.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Shallow and Deep Copying"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Copies.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Copies.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between shallow and deep copies",
   "tokens": {
    "blank": [
     "deep",
     "shallow"
    ],
    "text": [
     "A ",
     0,
     " copy is when Java makes a copy of the object and its attributes.\nA ",
     0,
     " copy is when Java makes a copy of the object, but the attributes are shared."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2431160952",
  "source": {
   "name": "introduction to objects formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nDog fido = new Dog();\nfido.breed = \"poodle\";\n```\n\nRearrange the code blocks below to declare the `Dog` class that corresponds to the code above. **Note**, not all of the code blocks will be used.",
   "initial": "class Dog {\n  String breed;\n}\nString breed = &quot;poodle&quot;; #distractor\npublic Dog(String breed) { #distractor\nclass dog #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nclass Dog {\n  String breed;\n}\n```\n\n* In the given code, no arguments were passed to `Dog` when `fido` was instantiated. There should be no constructor.\n* The given code set the value for `breed`, so `breed` should not be given a default value when initialized.\n* In the given code, the `Dog` class uses a capital `D`, so should the class definition.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Declare a Class"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT declare a class"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1338030279",
  "source": {
   "name": "introduction to objects formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nSelect **all** of the statements that are true about shallow and deep copies.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "7776806d-f482-fb51-e22a-5f17da2b1168",
     "correct": true,
     "answer": "You need to use the copy constructor to make a deep copy"
    },
    {
     "_id": "b0b7e9f9-e246-5fdf-3639-a111c948c8d3",
     "correct": true,
     "answer": "Shallow copies only copy the object but not the object attributes"
    },
    {
     "_id": "4c57c90c-c40c-e28a-bfa8-0a483a5f4ef6",
     "correct": true,
     "answer": "Deep copies make a copy of the object and the object attributes"
    },
    {
     "_id": "6fbcbda6-0a7f-f1ea-0be5-84c43dce2904",
     "correct": true,
     "answer": "Changing an attribute of one shallow copy will affect the attribute of the other shallow copy"
    }
   ],
   "guidance": "All of the statements are true. \n* The copy constructor is used to make a deep copy. \n* Shallow copies only make a copy of the object, but not of the attributes.\n* Deep copes make a copy of the object and the attributes.\n* Changing an attribute of one shallow copy will affect the attribute of the other shallow copy.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Shallow and Deep Copying"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between shallow and deep copies"
  }
 },
 {
  "type": "test",
  "taskId": "test-3286085930",
  "source": {
   "name": "introduction to objects coding exercise 1",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python .guides/secure/introObjects/exercise1_test.py",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 40,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass PracticeClass {\n  String date;\n}\n  \n//add class definitions above this line\n\npublic class Exercise1 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    \n\n    //add code above this line\n  }\n}\n```\n\nCreate the class `PracticeClass`. Then create the object attribute `date` of type `String`. ",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Creating Classes"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class without a constructor"
  }
 },
 {
  "type": "test",
  "taskId": "test-1000868489",
  "source": {
   "name": "introduction to objects exercise 2",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/Exercise2Tester.java\",\"className\":\"Exercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Cat {\n  String breed;\n  String color;\n  String name;\n  \n  public Cat() {\n    breed = \"american shorthair\";\n    color = \"black\";\n    name = \"kiwi\";\n  }\n}\n  \n//add class definitions above this line\n\npublic class Exercise2 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    \n\n    //add code above this line\n  }\n}\n```\n\nCreate the class `Cat`, then instantiate the string variables, `breed`, `color`, and `name`. Then create the constructor, but do not pass any parameters to it. Finally, set the values of the object attributes to be `\"american shorthair\"`, `\"black\"`, and `\"kiwi\"` respectively.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Object Constructors"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with a constructor"
  }
 },
 {
  "type": "test",
  "taskId": "test-743280736",
  "source": {
   "name": "introduction to objects coding exercise 3",
   "showName": false,
   "instructions": "Submit your work when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/Exercise3Tester.java\",\"className\":\"Exercise3Tester\"}],\"partialPoints\":false,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Superhero {\n  String name;\n  String secretIdentity;\n  String[] powers;\n  \n  public Superhero(String n, String s, String[] p) {\n    name = n;\n    secretIdentity = s;\n    powers = p;\n  }\n}\n  \n//add class definitions above this line\n\npublic class Exercise3 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n\n\n    //add code above this line\n  }\n}\n```\n\nStart by declaring the `Superhero` class. The constructor should include parameters that represent `name`, `secretIdentity`, and`powers`. Be sure to keep the parameters in this order; otherwise your code will not pass the automated tests. Set the value of each attribute to its matching parameter. ",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Object Constructors with parameters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with a constructor and parameters"
  }
 },
 {
  "type": "test",
  "taskId": "test-2663969036",
  "source": {
   "name": "introduction to objects coding exercise 4",
   "showName": false,
   "instructions": "Submit your work when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/Exercise4Tester.java\",\"className\":\"Exercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Observation {\n  String date;\n  double temperature;\n  double elevation;\n  int penguins;\n  double precipitation;\n  \n  public Observation(String d, double t, double e, int p) {\n    date = d;\n    temperature = t;\n    elevation = e;\n    penguins = p;\n    precipitation = 0;\n  }\n}\n  \n//add class definitions above this line\n\npublic class Exercise4 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    \n\n    //add code above this line\n  }\n}\n```\n\nDeclare the object attributes as instructed by the prompt. Create a constructor with parameters in the order of `date`, `temperature`, `elevation`, and `penguins`. The `precipitation` attribute has a default value, so it does not need to be a parameter of the constructor. Set the value of each attribute to the corresponding parameter. Finally, set the value of `precipitation` to `0`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Constructor"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with a construction, parameters, and a default value"
  }
 },
 {
  "type": "test",
  "taskId": "test-3142794422",
  "source": {
   "name": "introduction to objects coding exercise 5",
   "showName": false,
   "instructions": "Submit your work when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/Exercise5Tester.java\",\"className\":\"Exercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass BigCat {\n  String species;\n  String commonName;\n  String[] habitat;\n  static String genus = \"panthera\";\n  \n  public BigCat(String s, String c, String[] h) {\n    species = s;\n    commonName = c;\n    habitat = h;\n  }\n}\n  \n//add class definitions above this line\n\npublic class Exercise5 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    \n\n    //add code above this line\n  }\n}\n```\n\nCreate the `species`, `commonName` and `habitat` object attributes as instructed by the prompt. The `genus` attribute needs to be a class attribute. That is why the `static` keyword is used. Notice, `genus` is **not** all caps, so do not use the `final` keyword with this attribute. Finally, set the values of the object attributes with the constructor.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Class Attribute"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT declare a class attribute with the static keyword"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3387365333",
  "source": {
   "name": "introduction to objects lab 1",
   "showName": false,
   "instructions": "## Lab Question\n\nLook at the `Car` class definition below. How many parameters are used when creating an instance of the `Car` class?\n\n```java\nclass Car {\n  String make;\n  String model;\n  int year;\n  String color;\n\n  Car(String ma, String mo, int y) {\n    make = ma;\n    model = mo;\n    year = y;\n    color = \"black\";\n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "b053e919-b6f0-341c-c44a-569bfa6a2215",
     "correct": true,
     "answer": "3"
    },
    {
     "_id": "d04a4598-5772-9dc1-b5ad-f854ae16161a",
     "correct": false,
     "answer": "2"
    },
    {
     "_id": "0f7dad32-284f-c972-58ed-3b236633450f",
     "correct": false,
     "answer": "4"
    },
    {
     "_id": "d4147a78-2f3b-4f8d-aabc-3e937d989a50",
     "correct": false,
     "answer": "5"
    }
   ],
   "guidance": "While there are four object attributes, only three values (`ma`, `mo`, and `y`) are passed as parameters to the constructor. The `color` attribute gets a default value of `\"black\"`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Constructor"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Photogram.java",
     "code/introObjects/LabIntro.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Photogram.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify parameters passed to the constructor"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-568683216",
  "source": {
   "name": "intro objects lab 2 question ",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat does \"instantiate an object\" mean?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "bd848a24-269a-3ed8-f921-748a8fb19613",
     "correct": true,
     "answer": "Instantiating an object means to create an object based on a class."
    },
    {
     "_id": "0a65779c-a6de-6a26-f65b-226cb61f1eb4",
     "correct": false,
     "answer": "Instantiating an object means to create a class."
    },
    {
     "_id": "b4cd6157-2325-878e-09df-3f886a8d5df8",
     "correct": false,
     "answer": "Instantiating an object means to declare a variable."
    },
    {
     "_id": "4fd07915-4642-b61f-7247-f20edac42adb",
     "correct": false,
     "answer": "Instantiating an object means to make a copy of another object."
    }
   ],
   "guidance": "Instantiating an object means to create an object based on a class. The class is the blueprint from which objects are made. The act of creating an object based on the class blueprint is called instantiation.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Class instantiation"
     },
     {
      "name": "Programming Language",
      "value": "C++, Python, Java, JavaScript"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/IntroSwing.java"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/IntroSwing.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define object instantiation"
  }
 },
 {
  "type": "test",
  "taskId": "test-3706534948",
  "source": {
   "name": "introduction to objects lab challenge",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/introObjects/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/introObjects\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible answer:\n\n```java\n//add class definitions below this line\n    \nclass Dog {\n  String name;\n  String breed;\n  \n  public Dog(String n, String b) {\n    name = n;\n    breed = b;\n  }\n  \n  Dog(Dog d) {\n    name = d.name;\n    breed = d.breed;\n  }\n}\n  \n//add class definitions above this line\n\npublic class LabChallenge {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Dog dog1 = new Dog(\"Marceline\", \"German Shepherd\");\n    Dog dog2 = new Dog(dog1);\n    dog2.name = \"Cajun\";\n    dog2.breed = \"Belgian Malinois\";\n    \n    System.out.println(dog1.name + \" \" + dog1.breed);\n    System.out.println(dog2.name + \" \" + dog2.breed);\n    System.out.println(dog2 == dog1);\n\n    //add code above this line\n  }\n}\n```\n\nTo create a deep copy, you need to use a copy constructor. Create a constructor like before, but pass another `Dog` object as the only parameter. Set the object attributes to that of the parameter using dot notation.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Shallow and Deep Copying"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT make a deep copy of an object"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-808538143",
  "source": {
   "name": "objects lab 3 question",
   "showName": false,
   "instructions": "## Lab Question\n\nThe following lines of code were used in this lab. Which line of code instantiated a `JFrame` object?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "d038e4b8-f284-2afe-436d-7d225c4ec6ae",
     "correct": true,
     "answer": "`JFrame window = new JFrame(\"Photogram\");`"
    },
    {
     "_id": "fc173290-c6f5-1218-ba2b-46d9a0a349e8",
     "correct": false,
     "answer": "`window.setSize(800, 500);`"
    },
    {
     "_id": "83729b25-8673-3f96-8263-65e94e3deb31",
     "correct": false,
     "answer": "`window.setLayout(new FlowLayout(3));`"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nJFrame window = new JFrame(\"Photogram\");\n```\n\nJava uses the `new` keyword when instantiating objects.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Object Instantiation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     }
    ],
    "files": [
     "code/introObjects/Photogram.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Photogram.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify object instantiation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-144652727",
  "source": {
   "name": "intro objects lab question 4",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blank below with the correct word.",
   "showValues": true,
   "text": "The <<<static>>> keyword is used to denote a class attribute.",
   "distractors": "public\nnew\nprivate",
   "guidance": "The `static` keyword is used to indicate a class attribute.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Class variables"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Photogram.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Photogram.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify the keyword used to create class variables",
   "tokens": {
    "blank": [
     "static"
    ],
    "text": [
     "The ",
     0,
     " keyword is used to denote a class attribute."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-761353538",
  "source": {
   "name": "intro objects lab 5 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat are instance variables?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "06c6f1fd-fadd-085a-75c8-7e452ec2dfb7",
     "correct": true,
     "answer": "Instance variables are variables created by the constructor. You can think of instance variables as the attributes of an object."
    },
    {
     "_id": "7a4808e7-819b-efb8-9cc2-93916cd0895f",
     "correct": false,
     "answer": "There is no such thing as an instance variables in Java."
    },
    {
     "_id": "bec2c405-c522-7b73-d914-1422918e05af",
     "correct": false,
     "answer": "Instance variable is another name for a global variable."
    },
    {
     "_id": "1d89a56d-074c-de6f-23f5-88d5c4cc1797",
     "correct": false,
     "answer": "Instance variables are variables created inside methods."
    }
   ],
   "guidance": "Instance variables are variables created by the constructor. You can think of instance variables as the attributes of an object. Instance variables often store the values passed to the constructor as parameters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Instance Variables"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/introObjects/Photogram.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/introObjects/Photogram.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define instance variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4222575896",
  "source": {
   "name": "mutability external methods reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nObjects are mutable. What does this mean?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "5de52342-d55b-32c0-7930-8c7175002354",
     "correct": true,
     "answer": "Mutability means that value of object attributes can be changed."
    },
    {
     "_id": "de0a1273-e849-208a-10fa-235fee14a41c",
     "correct": false,
     "answer": "Mutability means that the you can change the attribute name for the object."
    },
    {
     "_id": "ca6f90d3-24a2-94d3-7609-436623babdcc",
     "correct": false,
     "answer": "Mutability means that objects must remain the same at all times."
    },
    {
     "_id": "24222f67-82a4-45a7-ee00-db3fb4a00fab",
     "correct": false,
     "answer": "Mutability means that an object change one time only."
    }
   ],
   "guidance": "Object mutability is the concept that values of object attributes can be changed.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Mutability"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/ExternalMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/ExternalMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define mutability"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1812218729",
  "source": {
   "name": "mutability external methods formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Dog {\n  String name;\n  String breed;\n\n  Dog() {\n    name = \"fido\";\n    breed = \"golden retriever\";\n  }\n}\n```\nUse the code blocks below to create the function `changeBreed` that updates the breed attribute of the `Dog` object. **Note**, not all of the blocks will be used, and code blocks must be properly indented.",
   "initial": "public static void changeBreed(Dog dog, String newBreed) {\n  dog.breed = newBreed;\n}\nd.breed = newBreed;  #distractor\npublic static void changeBreed() {  #distractor\nbreed = newBreed;  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic static void changeBreed(Dog dog, String newBreed) {\n  dog.breed = newBreed;\n}\n```\n\nThe `changeBreed` method needs to parameters, the `Dog` object being modified and the new breed. That is why the code block `public static void changeBreed() {` is incorrect. The parameter `dog` represents the `Dog` object being modified. To access the `breed` attribute, you first need to reference `dog`. That is why the code blocks `d.breed = newBreed;` and `breed = newBreed;` are incorrect.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Changing Objects with External Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct an external method that modifies an object"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3808903184",
  "source": {
   "name": "mutability external methods formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nImagine there exists a `Player` class that represents a video game character. Fill in the blanks below to complete the method `levelUp`. The method should do the following things:\n* Increase the player's level by 1\n* Increase the player's health by 10\n* Increase the player's score by 100",
   "showValues": false,
   "text": "```java\npublic static void levelUp(Player p) {\n  p.<<<level>>> += 1;\n  <<<p>>>.health += 10;\n  <<<p.score>>> += 100;\n}\n```",
   "distractors": "",
   "guidance": "The correct answer is:\n\n```java\npublic static void levelUp(Player p) {\n  p.level += 1;\n  p.health += 10;\n  p.score += 100;\n}\n```\n\nUsing the first line of code, you see that `Player p` is the parameter passed to `levelUp`. Since the level increases by 1, the second blank is `level`. The third blank is `p` since the `health` attribute cannot be accessed without a reference to the `Player` object. The last blank is `p.score` since this is the attribute that increases by 100.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     },
     {
      "name": "Content",
      "value": "Changing Objects with External Methods"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use context clues to create an external method that modifies an object",
   "tokens": {
    "blank": [
     "level",
     "p",
     "p.score"
    ],
    "text": [
     "```java\npublic static void levelUp(Player p) {\n  p.",
     0,
     " += 1;\n  ",
     0,
     ".health += 10;\n  ",
     0,
     " += 100;\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-680032819",
  "source": {
   "name": "external methods vs class methods reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks with either **external method**, **instance method**, or **external methods and instance methods** so that the sentence is correct.",
   "showValues": true,
   "text": "An <<<instance method>>> is declared inside of a class.\nAn <<<external method>>> is declared outside of a class.\n<<<External methods and instance methods>>> can modify an object.",
   "distractors": "",
   "guidance": "The correct answers are:\n\nAn instance method is declared inside of a class.\nAn external method is declared outside of a class.\nExternal methods and instance methods can modify an object.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/mutability/Mutability.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/Mutability.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between external and instance methods",
   "tokens": {
    "blank": [
     "instance method",
     "external method",
     "External methods and instance methods"
    ],
    "text": [
     "An ",
     0,
     " is declared inside of a class.\nAn ",
     0,
     " is declared outside of a class.\n",
     0,
     " can modify an object."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2540601199",
  "source": {
   "name": "more class methods reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume you have the `Person` class as defined below:\n\n```java\nclass Person {\n  String name;\n  int age;\n\n  Person(String n, int a) {\n    name = n;\n    age = a;\n  }\n}\n```\n\nIn addition, `alice` is an instance of the `Person` class:\n\n```java\nPerson alice = Person(\"Alice\", 32);\n```\n\nUsing the code blocks below to create an instance method called `birthday` that adds a year to Alice's age. **Note**, not all of the code blocks will be used, and code blocks must be properly indented.",
   "initial": "void birthday() {\n  age += 1;\n}\nint birthday() {  #distractor\nvoid birthday(int newAge) {  #distractor\nage = newAge;  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nvoid birthday() {\n  age += 1;\n}\n```\n\n* The instance method `birthday` should not be of type `int` as this method does not return an integer.\n* The instance method `birthday` does not need a parameter, as this method always increases the `age` attribute by 1.\n* The `age` attribute should be increased by 1, not by another integer passed to the `birthday` method.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Instance Method"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Classes and Objects"
     }
    ],
    "files": [
     "code/mutability/MoreMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/MoreMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create an instance method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1589623942",
  "source": {
   "name": "printing the meal 1 reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is the name of a method that is defined within a class?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "340c3867-b606-65cf-c728-b9cd4a9db25a",
     "correct": true,
     "answer": "Instance method"
    },
    {
     "_id": "ff7ce12d-773c-5388-b8b3-3a9daf81550f",
     "correct": false,
     "answer": "Method"
    },
    {
     "_id": "80681c11-773d-dcf1-1e67-a98b2c2f737c",
     "correct": false,
     "answer": "User-defined method"
    }
   ],
   "guidance": "An instance method is a method that is defined within a class. The name `method` is not correct because it does not distinguish if the method was declared inside or outside of a class. While instance methods can be a user-defined method, not all user-defined methods are instance methods. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Instance methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/MoreMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/MoreMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate a instance method from other methods"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2239985009",
  "source": {
   "name": "printing the meal 2 reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the class `Author` is defined as follows:\n\n```java\nclass Author {\n  String name;\n  String book;\n  \n  Actor(String authorName, String famousBook) {\n    name = authorName;\n    book = famousBook;\n  }\n}\n```\n\nFill in the blanks below so that the instance method `printAuthor` is correct.",
   "showValues": true,
   "text": "```java\n<<<void>>> printAuthor() {\n  System.out.println(<<<name>>> + \" is known for their book \" + <<<book>>>);\n}\n```",
   "distractors": "String\nauthorName\nfamousBook",
   "guidance": "The correct answer is:\n\n```java\nvoid printAuthor() {\n  System.out.println(name + \" is known for their book \" + book);\n}\n```\n\n* `String` is not correct because the `printAuthor` does not have a return statement, so the return type must be `void`.\n* `authorName` and `famousBook` are not correct because those are the parameter names for the constructor, not the attribute names.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Instance methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/MoreMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/MoreMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create an instance method",
   "tokens": {
    "blank": [
     "void",
     "name",
     "book"
    ],
    "text": [
     "```java\n",
     0,
     " printAuthor() {\n  System.out.println(",
     0,
     " + \" is known for their book \" + ",
     0,
     ");\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1983956315",
  "source": {
   "name": "methods formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Dog: {\n  String name;\n  String breed;\n\n  Dog(String n, String b) {\n    name = n;\n    breed = b;\n  }\n\n  void bark() {\n    System.out.println(\"Woof, woof!\");\n  }\n}\n\nDog myDog = new Dog(\"Brutus\", \"Pomeranian\");\n```\n\nWhat code would you add to print `Woof, woof!`?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "2e983084-185f-003e-299c-21aa1ffd93e7",
     "correct": true,
     "answer": "myDog.bark();"
    },
    {
     "_id": "fc15c228-9790-eb70-99ce-4d2b695b6484",
     "correct": false,
     "answer": "bark();"
    },
    {
     "_id": "63786543-a328-cb32-f540-353386a9088f",
     "correct": false,
     "answer": "myDog.bark(\"Brutus\", \"Pomeranian\");"
    },
    {
     "_id": "ba424d9d-fc68-9da7-3aab-26b4f6ab6bc7",
     "correct": false,
     "answer": "System.out.println(myDog.bark());"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nmyDog.bark();\n```\n\n* `bark();` is not correct because methods are called with dot notation. Dot notation requires the object name followed by the method name. This code snippet is missing the object name.\n* `myDog.bark(\"Brutus\", \"Pomeranian\");` is not correct because the `bark` method does not take any arguments.\n* `System.out.println(myDog.bark());` is not correct because the `bark` method does not return a value that can be printed.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/MoreMethods.java"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT demonstrate how to call an instance method"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3809215804",
  "source": {
   "name": "methods formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nDrag the code blocks into the box below so that the instance method `hello` will print a greeting using the `name` attribute. **Note**, not all of the code blocks will be used, and code blocks must be properly indented.",
   "initial": "void hello() {\n  System.out.println(&quot;Hello, &quot; + name);\n}\nString hello() {  #distractor\nvoid hello(String name) {  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nvoid hello() {\n  System.out.println(\"Hello, \" + name);\n}\n```\n\n* The `hello` method does not have a `return` statement, so the type is `void` not `String`.\n* `name` is an attribute, so `hello` does not need a parameter; it can already access the attribute.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Instance methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create an Instance method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-571453302",
  "source": {
   "name": "static methods reading questoin",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat special keyword is required when creating a static method?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "cd46376b-2c9b-03d6-6713-55c0ff46100d",
     "correct": true,
     "answer": "`static`"
    },
    {
     "_id": "ff259ad8-5b8c-cff0-01a3-6479f5a44395",
     "correct": false,
     "answer": "`public`"
    },
    {
     "_id": "22b096ca-aca9-4f42-4540-668207cb1bfb",
     "correct": false,
     "answer": "`private`"
    },
    {
     "_id": "af80e280-0685-a79f-c9c8-4c0a00173e3b",
     "correct": false,
     "answer": "`void`"
    }
   ],
   "guidance": "The `static` keyword is used when creating static methods.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Static Keyword"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Static Methods"
     }
    ],
    "files": [
     "code/mutability/StaticMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/StaticMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recognize keyword needed to create static methods"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3303739284",
  "source": {
   "name": "independence from objects reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "A <<<static>>> method can be called without instantiating an object.\nAn <<<instance>>> method must instantiate an object before being called.",
   "distractors": "public\nprivate",
   "guidance": "The correct answers are:\n\nA **static** method can be called without instantiating an object.\nAn **instance** method must instantiate an object before being called.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/Independent.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/Independent.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between static and instance methods",
   "tokens": {
    "blank": [
     "static",
     "instance"
    ],
    "text": [
     "A ",
     0,
     " method can be called without instantiating an object.\nAn ",
     0,
     " method must instantiate an object before being called."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "test",
  "taskId": "test-643654737",
  "source": {
   "name": "mutability coding exercise 1",
   "showName": false,
   "instructions": "Submit your code for evaluation",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise1Tester.java\",\"className\":\"Exercise1Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise1\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass CelestialBody {\n  String name;\n  double diameter;\n  long distance;\n  int moons;\n  \n  CelestialBody(String n, double diam, long dist, int m) {\n    name = n;\n    diameter = diam;\n    distance = dist;\n    moons = m;\n  }\n  \n  double comparedToEarth() {\n    double earth = 12765.3;\n    double relativeSize = diameter / earth;\n    return relativeSize;\n  }\n}\n \n//add class definitions above this line\n\npublic class Exercise1 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n    \n\n    CelestialBody planet = new CelestialBody(\"Jupiter\", 142984, 778360000L, 79);\n    System.out.println(planet.comparedToEarth());\n\n    //add code above this line\n  }\n}\n```\n\n* Move the `comparedToEarth` method inside of the `CelestialBody` class.\n* Remove the `public` and `static` keywords from the method.\n* `comparedToEarth`does not need any parameters since it can directly access the `diameter` attribute.\n* Remove `planet` from `comparedToEarth`. The method no longer has the parameter `planet`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise1/Exercise1.java",
     "code/mutability/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise1/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT transform an external method to an instance method"
  }
 },
 {
  "type": "test",
  "taskId": "test-3842605",
  "source": {
   "name": "mutability coding exercise 2",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise2Tester.java\",\"className\":\"Exercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise2\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass CelestialBody {\n  String name;\n  double diameter;\n  long distance;\n  int moons;\n  \n  CelestialBody(String n, double diam, long dist, int m) {\n    name = n;\n    diameter = diam;\n    distance = dist;\n    moons = m;\n  }\n  \n  static String closerToSun(CelestialBody b1, CelestialBody b2) {\n    if (b1.distance < b2.distance) {\n      return b1.name;\n    } else {\n      return b2.name;\n    }\n  }\n}\n \n//add class definitions above this line\n\npublic class Exercise2 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n    \n    CelestialBody mercury = new CelestialBody(\"Mercury\", 4879.4, 57909000, 0);\n    CelestialBody venus = new CelestialBody(\"Venus\", 12103.6, 108160000, 0);\n    String closest = CelestialBody.closerToSun(mercury, venus);\n    System.out.println(closest);\n    \n    //add code above this line\n  }\n}\n```\n\n* Static methods require the use of the `static` method.\n* The `closerToSun` method takes two `CelestialBody` objects as parameters.\n* Find the smaller of the two `distance` attributes of the `CelestialBody` objects.\n* Return the `name` attribute of the object that is closest to the sun.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise2/Exercise2.java",
     "code/mutability/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise2/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a static method"
  }
 },
 {
  "type": "test",
  "taskId": "test-3144038960",
  "source": {
   "name": "mutability coding exercise 4",
   "showName": false,
   "instructions": "Submit your work for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise4Tester.java\",\"className\":\"Exercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise4\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nimport java.util.ArrayList;\n\n//add class definitions below this line\n\nclass Library {\n  ArrayList<String> available;\n  ArrayList<String> onLoan;\n  \n  Library() {\n    available = new ArrayList<String>();\n    onLoan = new ArrayList<String>();\n  }\n  \n  void addBooks(String[] books) {\n    for (String book : books) {\n      available.add(book);\n    }\n  }\n  \n  void borrowBook(String book) {\n    onLoan.add(book);\n    available.remove(book);\n  }\n  \n  void returnBook(String book) {\n    onLoan.remove(book);\n    available.add(book);\n  }\n}\n \n//add class definitions above this line\n\npublic class Exercise4 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n    \n    Library myLibrary = new Library();\n    String[] books = {\"Four Seasons\", \"Say Nothing\", \"Milkman\", \"Harry Potter and the Order of the Phoenix\"};\n    myLibrary.addBooks(books);\n    myLibrary.borrowBook(\"Harry Potter and the Order of the Phoenix\");\n    myLibrary.borrowBook(\"Say Nothing\");\n    myLibrary.returnBook(\"Say Nothing\");\n    System.out.println(myLibrary.available);\n    System.out.println(myLibrary.onLoan);  \n\n    //add code above this line\n  }\n}\n```\n\n* The `addBooks` method should iterate over the list of books passed to the method. Each element of the list should be added to the ArrayList attribute `available`. \n* The `borrowBook` method removes the book from the `available` attribute and adds it to the `onLoan` attribute.\n* The `returnBook` method removes the book from the `onLoan` attribute and adds it to the `available` attribute.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise4/Exercise4.java",
     "code/mutability/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise4/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to create instance methods"
  }
 },
 {
  "type": "test",
  "taskId": "test-2231923768",
  "source": {
   "name": "mutability coding exercise 5",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise5Tester.java\",\"className\":\"Exercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise5\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "```java\n  void board(int p) {\n    passengers += p;\n    calculateFares(p);\n  }\n```\nThe `board` method takes an integer of the people boarding the train. This number is added to the `passengers` attribute. Because people pay for the subway when boarding, be sure to call the `calculateFares` method when people are boarding the subway. This will keep track of the total fares.\n\n```java\n  void calculateFares(int p) {\n    totalFares += p * fare;\n  }\n```\nThe `calculateFares` method takes an integer representing the people boarding the subway. Multiply this number by the `fare` attribute and add this to the `totalFares` attribute.\n\n```java\n  void disembark(int p) {\n    if (passengers - p < 0) {\n      passengers = 0;\n    } else {\n      passengers -= p;\n    }\n  }\n```\nThe `disembark` method takes an integer representing the number of people exiting the subway. Remember, there cannot be a negative number of people on board a subway. Check to make sure that the `passengers` attribute minus the number of people disembarking is less than 0. If so, set `passengers` to 0. If not, subtract the people leaving the subway from `passengers`.\n\n```java\n  static void changeFare(double newFare) {\n    fare = newFare;\n  }\n```\nThe `changeFare` method is a `static` method because this method only changes the value of the `static` attribute `fare`. This method takes a double that represents the new fare. This value is assigned to the `fare` attribute.\n\n```java\n  int getIndex(String element) {\n    for (int i = 0; i < stops.length; i++) {\n      if (element.equals(stops[i])) {\n        return i;\n      }\n    }\n    return -1;\n  }\n```\nThis coding exercise does not ask you to make the `getIndex` method. However, this helper method allows us to reuse code instead of writing it multiple times. This method is used for the `distance` and `advance` methods.\n\n```java\n  int distance(String destination) {\n    int currentIndex = getIndex(currentStop);\n    int destinationIndex = getIndex(destination);\n    return Math.abs(destinationIndex - currentIndex);\n  }\n```\nThe `distance` method takes a string that represents the subway stop to which you are going to calculate the distance. We will calculate the distance (number of stops away) by using the index (the attribute `stops` is an array) for the destination and the index of the subway's current stop. Use the helper method `getIndex` to get the index of `currentStop` and the index of `destination`. The difference between these two numbers is the distance. However, we do not want a negative number to represent the difference, so we use the absolute value method (`Math.abs`) to keep the distance positive.\n\n```java\n  void advance() {\n    if (direction.equals(\"south\")) {\n      if (currentStop.equals(\"Kendall\")) {\n        currentStop = \"Central\";\n        direction = \"north\";\n      } else {\n        int currentIndex = getIndex(currentStop);\n        currentStop = stops[currentIndex + 1];\n      }\n    } else if (direction.equals(\"north\")) {\n      if (currentStop.equals(\"Alewife\")) {\n        currentStop = \"Davis\";\n        direction = \"south\";\n      } else {\n        int currentIndex = getIndex(currentStop);\n        currentStop = stops[currentIndex - 1];\n      }\n    }\n  }\n```\nThe `advance` method is the most complex. There are four different scenarios to take into account:\n1) The subway is travelling South and is at the terminus (`\"Kendall\"`). For this scenario, the `currentStop` attribute becomes the previous stop (`\"Central\"`) and the `direction` attribute becomes `\"north\"`. \n1) The subway is traveling South but is not at the terminus. For this scenario, use the `getIndex` helper method to get the index of the subway's current stop. Then update `currentStop` to the next element in the `stops` attribute.\n1) The subway is travelling North and is at the terminus (`\"Alewife\"`). For this scenario, the `currentStop` attribute becomes the next stop (`\"Davis\"`) and the `direction` attribute becomes `\"south\"`.\n1) The subway is travelling North but is not at the terminus. For this scenario, use the `getIndex` helper method to get the index of the subway's current stop. Then update `currentStop` to the previous element in the `stops` attribute.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Intance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise5/Exercise5.java",
     "code/mutability/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise5/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create several instance methods for a given class"
  }
 },
 {
  "type": "test",
  "taskId": "test-83966248",
  "source": {
   "name": "mutability lab challenge",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/labChallenge\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n  int totalAnimals() {\n    return bigCats + primates + reptiles + birds;\n  }\n```\nThe `totalAnimals` does not have any parameters, and it returns the sum of the `bigCats`, `primates`, `reptiles`, and `birds` attributes.\n\n```java\n  int totalMammals() {\n    return bigCats + primates;\n  }\n```\nThe `totalMammals` method does not have any parameters. Return only the sum of `bigCats` and `primates` attributes. The other animals are not mammals.\n\n```java\n  String mostAnimals() {\n    if (bigCats > primates && bigCats > reptiles && bigCats > birds) {\n      return \"big cats\";\n    } else if (primates > bigCats && primates > reptiles && primates > birds) {\n      return \"primates\";\n    } else if (reptiles > bigCats && reptiles > primates && reptiles > birds) {\n      return \"reptiles\";\n    } else if (birds > bigCats && birds > primates && birds > reptiles) {\n      return \"birds\";\n    } else {\n      return \"There are an equal amount of animals\";\n    }\n  }\n```\nThe `mostAnimals` method does not have any parameters. Use a series of compound conditionals to ask if each attribute is greater than the rest of the attributes. Return a string for the name of the attribute with the most animals.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create several instance methods for a class"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2028536607",
  "source": {
   "name": "mutability lab 1 question",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the following code:\n\n```java\nclass Coffee {\n  String country;\n  String region;\n\n  Country(String c, String r) {\n    country = c;\n    region = r;\n  }\n}\n```\n\nFill in the blanks below to complete the instance method `printCoffee`.",
   "showValues": false,
   "text": "```java\n<<<void>>> printCoffee() <<<{>>>\n  System.out.println(\"This coffee comes from \" + <<<country>>> + \".\");\n  System.out.println(\"It was harvested in the \" + <<<region>>> + \" region.\");\n}\n```",
   "distractors": "",
   "guidance": "The correct answer is:\n\n```java\nvoid printCoffee() {\n  System.out.println(\"This coffee comes from \" + country + \".\");\n  System.out.println(\"It was harvested in the \" + region + \" region.\");\n}\n```\n\nThis method does not have a `return` statement, so it needs to be of type `void`. Curly brackets are used to mark the beginning and end of the code in a method. The second print statement is `region` since the word \"region\" appears in the text. That means the first print statement uses `country`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/Drawing.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/Drawing.java"
     },
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct an instance method",
   "tokens": {
    "blank": [
     "void",
     "{",
     "country",
     "region"
    ],
    "text": [
     "```java\n",
     0,
     " printCoffee() ",
     0,
     "\n  System.out.println(\"This coffee comes from \" + ",
     0,
     " + \".\");\n  System.out.println(\"It was harvested in the \" + ",
     0,
     " + \" region.\");\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "test",
  "taskId": "test-2519445590",
  "source": {
   "name": "mutability coding exercise 3",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/mutability/Exercise3Tester.java\",\"className\":\"Exercise3Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/mutability/exercise3\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass Mass {\n  double milligrams;\n  double grams;\n  double kilograms;\n  \n  Mass(int mg, int g, int kg) {\n    milligrams = mg;\n    grams = g;\n    kilograms = kg;\n  }\n  \n  double totalWeight() {\n    double tw = kilograms * 1000 + grams + milligrams / 1000;\n    return tw;\n  }\n  \n  static double combinedWeight(Mass m1, Mass m2) {\n    return m1.totalWeight() + m2.totalWeight();\n  }\n  \n  static String heavier(Mass m1, Mass m2) {\n    double mass1 = m1.totalWeight();\n    double mass2 = m2.totalWeight();\n    if (mass1 > mass2) {\n      return \"The first object is heavier\";\n    } else if (mass2 > mass1) {\n      return \"The second object is heavier\";\n    } else {\n      return \"The two objects weigh the same\";\n    }\n  }\n  \n  static double averageWeight(Mass m1, Mass m2) {\n    return combinedWeight(m1, m2) / 2;\n  }\n}\n \n//add class definitions above this line\n```\n\nThe `totalWeight` method is a helper method and needs direct access to the instance attributes of a `Mass` object. Static methods cannot directly access instance attributes, so `totalWeight` cannot be a static method. For all of the other methods, add the `static` keyword. Each method takes two `Mass` objects as parameters. Be sure that each static methods references both of these arguments (`m1` and `m2` in the example above) when calling the `totalWeight` method or calling the `combinedWeight` method.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [
     "code/mutability/exercise3/Exercise3.java",
     "code/mutability/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/mutability/exercise3/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to transform an instance method into a static method."
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-425645972",
  "source": {
   "name": "mutability lab 2 question",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume that the `TravelLog` class exists with the following constructor:\n\n```java\nclass TravelLog {\n  ArrayList<String> cities;\n\n  TravelLog() {\n    cities = new ArrayList<String>();\n  }\n}\n```\n\nCreate the instance method `addCity` by dragging the code blocks into the box below. The method should add the name of a city to the list of cities visited. **Note**, not all of the code blocks will be used, and code blocks must be properly indented.",
   "initial": "void addCity(String city) {\n  cities.add(city);\n}\nstatic void addCity(String city) { #distractor\ncity.add(cities); #distractor\nvoid addCity(int city) { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer:\n\n```java\nvoid addCity(String city) {\n  cities.add(city);\n}\n```\n\n* You are asked to make an instance method, not a static method. That is why `static void addCity(String city) {` is not correct.\n* `cities` is the ArrayList attribute, not `city`. That is why `city.add(cities);` is not correct.\n* The `addCity` method takes the name of a city as a parameter, which is a string. That is why `void addCity(int city) {` is not correct.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create an instance method"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4205667561",
  "source": {
   "name": "static methods formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code and determine which method is a static method and which one is an instance method.\n\n```java\nDog myDog = new Dog(\"spike\", \"pomeranian\");\nmyDog.sit();\nDog.bark();\n```\n\nFill in the blanks below.",
   "showValues": true,
   "text": "<<<sit()>>> is an instance method.\n<<<bark()>>> is a static method.",
   "distractors": "",
   "guidance": "The correct answer is:\n\n`sit()` is an instance method.\n`bark()` is a static method.\n\nOnly static method can be called from the class (`Dog.bark()`). Therefore, `sit()` must be an instance method",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify a static method",
   "tokens": {
    "blank": [
     "sit()",
     "bark()"
    ],
    "text": [
     0,
     " is an instance method.\n",
     0,
     " is a static method."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3234133400",
  "source": {
   "name": "static methods formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nWhy does the following code generate an error?\n\n```java\nclass SmartPhone {\n  String manufacturer;\n  String model;\n\n  SmartPhone(String ma, String mo) {\n    manufacturer = ma;\n    model = mo;\n  }\n\n  static void describe() {\n    System.out.println(manufacturer + \" \" + model);\n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "99ffe7c1-b2c1-8714-5e66-ac4c1b0ea465",
     "correct": true,
     "answer": "Static methods are not allowed to directly access instance attributes."
    },
    {
     "_id": "4a8770d3-c578-eda9-3b2f-af089def806e",
     "correct": false,
     "answer": "The return type of the `describe` method should be `String`."
    },
    {
     "_id": "dafa4014-35e4-50c9-1946-cc8e8394f62d",
     "correct": false,
     "answer": "The constructor has too many parameters."
    },
    {
     "_id": "5ade9994-35d0-29f8-829e-e3010cc6920f",
     "correct": false,
     "answer": "There is nothing wrong with the code."
    }
   ],
   "guidance": "Static methods are not allowed to directly access instance attributes. Either the method needs to be an instance method (remove the `static` keyword), or you need to pass a `SmartPhone` object to `describe` and access the attributes via the argument.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize that static methods cannot directly access instance attributes"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2980161329",
  "source": {
   "name": "mutability lab 3 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat keyword is used when creating an instance method?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "ea35d9d9-0ea9-737b-87b3-aead748e81b7",
     "correct": true,
     "answer": "There is no keyword used when creating an instance method"
    },
    {
     "_id": "3f18c6d3-5c39-6b7e-6b0d-4ea70fa0fe4c",
     "correct": false,
     "answer": "Use the `static` keyword"
    },
    {
     "_id": "b24b30d5-661e-d92d-843d-eb3925c04ac0",
     "correct": false,
     "answer": "Use the `instance` keyword"
    },
    {
     "_id": "8d63a844-1c3b-c9e2-7f29-2227b67e3080",
     "correct": false,
     "answer": "Use the `method` keyword"
    }
   ],
   "guidance": "There is no keyword used when creating an instance method. A static method uses the `static` keyword, but there is no keyword to designate an instance method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Instance Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify the lack of keyword used to declare an instance method."
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2390758956",
  "source": {
   "name": "what is encapsulation reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the **best** definition of encapsulation from the choices below.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "02b39ee9-e50d-4ec4-3a5a-078e78460ddd",
     "correct": true,
     "answer": "Encapsulation occurs when you group together related data and methods, and when you hide or restrict access to data."
    },
    {
     "_id": "88bdd045-0fb1-73d3-e6c3-96f58ccaac07",
     "correct": false,
     "answer": "Encapsulation occurs when you hide or restrict access to data."
    },
    {
     "_id": "18c367a0-1b3e-0d4f-7f8e-d23f430bff53",
     "correct": false,
     "answer": "Encapsulation occurs when you group together related data and methods."
    }
   ],
   "guidance": "There are two main ideas behind encapsulation: grouping together related data and restricting this data. Each idea on its own can be an example of encapsulation. However, the best definition is one that includes grouping the data and restricting the data.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Encapsulation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/Encapsulation.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/Encapsulation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define encapsulation"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4197611854",
  "source": {
   "name": "public access modifier reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nUsing the ideas of encapsulation, select **all** the parts of your program that should use the `public` access modifier.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "76f2659a-51ab-f40b-8d89-5ca554fa1fa1",
     "correct": true,
     "answer": "Constructor"
    },
    {
     "_id": "47af5564-447c-0e8f-f39e-83be8d7b9a1a",
     "correct": true,
     "answer": "Methods"
    },
    {
     "_id": "a0cb6385-695e-a993-a5c0-027278dcd4e2",
     "correct": false,
     "answer": "Attributes"
    }
   ],
   "guidance": "Constructors and methods should make use of the `public` access modifier. Not every method will be public, but encapsulation requires that some methods be public. As a general rule, all attributes should be private even though Java allows for public attributes.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Public Access Modifier"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/PublicKeyword.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/PublicKeyword.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify what parts of their program should be public."
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2739099056",
  "source": {
   "name": "private access modifier reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect **all** of the true statements.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "3c7aa379-cb96-edbd-5bf9-8d5d55ac3576",
     "correct": true,
     "answer": "All attributes should be private"
    },
    {
     "_id": "f83654f5-cb9f-17b4-8379-c3e3e622b352",
     "correct": true,
     "answer": "Some methods should be private while others public"
    },
    {
     "_id": "f90d9535-eab6-35f0-da4f-17126221876f",
     "correct": false,
     "answer": "It is impossible to access private attributes and methods"
    },
    {
     "_id": "911b1638-5baa-4428-3f7b-75eb3e05d63d",
     "correct": false,
     "answer": "Methods called by the user should be private"
    }
   ],
   "guidance": "## True Statements\n* The statement `All attributes should be private` is true because encapsulation dictates that access to attributes should be restricted.\n* The statement `Some methods should be private while others public` is true because encapsulation says to restrict access with private methods. However, if all methods are private then the user could not call them. Therefore you need a mix of private and public methods.\n\n## False Statements\n* The statement `It is impossible to access private attributes and methods` is false because public methods can invoke private attributes and methods.\n* The statement `Methods called by the user should be private` is false because methods called by the user need to be public.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Private Access Modifier"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/PrivateKeyword.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/PrivateKeyword.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize true statements about the private access modifier"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-44663644",
  "source": {
   "name": "black box reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich definition below is the **best** definition for code as a black box?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "81eeaa02-a024-c064-eae3-be19cb126586",
     "correct": true,
     "answer": "When users know how to interact with the code, but they do not understand the inner workings of the code."
    },
    {
     "_id": "5dbcb0d0-26f6-967e-94a2-882c3aa80d3f",
     "correct": false,
     "answer": "When users do not understand the inner workings of the code."
    },
    {
     "_id": "6f2fa3e0-977b-6d59-15ab-40c384325e91",
     "correct": false,
     "answer": "When the `private` access modifier is used."
    }
   ],
   "guidance": "The best definition is:\n\n> When users know how to interact with the code, but they do not understand the inner workings of the code.\n\nA key part of code as a black box is that users do not need to understand the inner workings of the code. However, users are expected to use black box code, so they need to understand how to interact with it. While the `private` keyword is used to hide code from the user, simply using `private` does not create a black box. A black box is the result of careful planning — hiding everything that should not be directly accessed while making certain methods public.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Black Box"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/BlackBox.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/BlackBox.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define black box code"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-892924295",
  "source": {
   "name": "encapsulation formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Dog {\n  private String name;\n  private String breed;\n\n  private Dog(String n, String b) {\n    name = n;\n    breed = b;\n  }\n\n  private void bark() {\n    System.out.println(\"Woof! Woof!\");\n  }\n}\n```\n\nThe code does not make proper use of encapsulation. Why?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "ec1cdc6f-44be-ae79-3c09-6eecf7ff12e9",
     "correct": true,
     "answer": "Everything is private. There is no way to instantiate a `Dog` object or call the `bark` method."
    },
    {
     "_id": "637c8c57-d98c-329c-2ff0-38773dbd8fb4",
     "correct": false,
     "answer": "Trick question, there is nothing wrong with the code."
    },
    {
     "_id": "fc223f4b-6be2-184a-b5f5-13c2283ee6ee",
     "correct": false,
     "answer": "The instance attributes should be public."
    }
   ],
   "guidance": "The correct answer is:\n\n>Everything is private. There is no way to instantiate a `Dog` object or call the `bark` method.\n\nEncapsulation is the practice of hiding and exposing information to the user. As written, the `Dog` class cannot be instantiated because the constructor is private. Even if this were public, the user could not call the `bark` method. Encapsulation means using both the `public` and `private` access modifiers.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Encapsulation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify incorrect encapsulation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2607923838",
  "source": {
   "name": "encapsulation formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nEncapsulation requires the use of the `public` and `private` keywords. Fill in the blanks so that the proper access modifier(s) correspond to different parts of a program.",
   "showValues": true,
   "text": "The constructor should be <<<public>>>.\nInstance attributes should be <<<private>>>.\nMethods should be <<<public and private>>>.",
   "distractors": "",
   "guidance": "Here are the correct answers:\n\n* Constructors should be public. If not, you cannot instantiate an object.\n* The convention in Java is to always make instance attributes private.\n* Methods need to be both public and private. Only those methods need by the user should be public; the rest should be private.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Access Modifiers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify when the public and private access modifiers should be used",
   "tokens": {
    "blank": [
     "public",
     "private",
     "public and private"
    ],
    "text": [
     "The constructor should be ",
     0,
     ".\nInstance attributes should be ",
     0,
     ".\nMethods should be ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1957726401",
  "source": {
   "name": "getters reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Country {\n  private String name;\n  private String[] languages;\n\n  public Country(String n, String[] l) {\n    name = n;\n    languages = l;\n  }\n}\n```\n\nDrag the code blocks into the box below. Create the **best** getter method for the `language` attribute. **Hint**, not all of the blocks will be used, and blocks must be properly indented.",
   "initial": "public String[] getLanguages() {\n  return languages;\n}\nprivate String[] getLanguages() { #distractor\npublic String[] returnLanguages() { #distractor\nSystem.out.println(languages); #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic String[] getLanguages() {\n  return languages;\n}\n```\n\n* Getter methods are accessible to the user, so they need to have the `public` access modifier. \n* The convention in Java is to start a getter method with the word `get`. Java would not throw an error if the method is named `returnLanguages`, but best practices say to use `getLanguages`.\n* A getter method should do only one thing, return the value of an attribute. Printing should not be done by a getter method.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Getter Methods "
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/Getters.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/Getters.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a getter method"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3781411493",
  "source": {
   "name": "setters reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Country {\n  private String name;\n  private String[] languages;\n\n  public Country(String n, String[] l) {\n    name = n;\n    languages = l;\n  }\n}\n```\n\nDrag the code blocks into the box below. Create the **best** setter method for the `languages` attribute. **Hint**, not all of the blocks will be used, and blocks must be properly indented.",
   "initial": "public void setLanguages(String[] newLanguages) {\n  languages = newLanguages;\n}\npublic String[] setLanguages(String[] newLanguages) { #distractor\npublic void setLanguages() { #distractor\nprivate String[] setLanguages(String[] newLanguages) { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic void setLanguages(String[] newLanguages) {\n  languages = newLanguages;\n}\n```\n\n* Setter methods do not return a value, so their type should be `void`.\n* Setter methods update an attribute to a new value, so they require a parameter that represents this new value.\n* Setter methods need to be public so they can be called by users of the class.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Setter Methods "
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/Setters.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/Setters.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a setter method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3712924918",
  "source": {
   "name": "data validation reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect **all** of the true statements about data validation.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "db82b984-96d7-1415-a543-0d344286111a",
     "correct": true,
     "answer": "Data validation is done in a setter method"
    },
    {
     "_id": "77fe7c4b-7b22-480e-0295-976bef6aa05f",
     "correct": true,
     "answer": "Data validation is important because the Java compiler cannot find all errors"
    },
    {
     "_id": "5da35b23-1698-988f-191f-fb700a684788",
     "correct": false,
     "answer": "Data validation is done in a getter method"
    },
    {
     "_id": "69613594-c599-e147-dfdf-45199b9366bb",
     "correct": false,
     "answer": "Data validation is important because you want to make sure values of the wrong data type are not assigned to an attribute"
    }
   ],
   "guidance": "The true statements are:\n\n>Data validation is done in a setter method\nData validation is important because the Java compiler cannot find all errors\n\n* The job of a getter method is to return the value of an attribute. These methods should never update the value of an attribute, so data validation should not be done in a getter method.\n* The Java compiler will find some kinds of errors like incorrect data types. However, the compiler does not understand the context of the code. Data validation is the process of making sure a value is appropriate for its intended use.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/DataValidation.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/DataValidation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify true statements about data validation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3069619256",
  "source": {
   "name": "getters and setters formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nFill in the blanks below.",
   "showValues": false,
   "text": "A <<<getter>>> accesses the value of a private instance variable.\nA <<<setter>>> mutates the value of a private instance variable.",
   "distractors": "",
   "guidance": "A **getter** accesses the value of a private instance variable.\nA **setter** mutates the value of a private instance variable.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Getters and Setters"
     },
     {
      "name": "Programming Language",
      "value": "C++, Python, Java, JavaScript"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define getters and setters",
   "tokens": {
    "blank": [
     "getter",
     "setter"
    ],
    "text": [
     "A ",
     0,
     " accesses the value of a private instance variable.\nA ",
     0,
     " mutates the value of a private instance variable."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-45499968",
  "source": {
   "name": "getters and setters formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the class `PrimaryColors` as defined below:\n\n```java\nclass PrimaryColor {\n  private String color = \"red\";\n\n  public String getColor() {\n    return color;\n  }\n}\n```\n\nDrag the code blocks into the box below to create a setter that validates if the new color is a primary color. **Hint**, not all of the code blocks will be used, and blocks must be properly indented.",
   "initial": "public void setColor(String newColor) {\n  String[] primaryColors = {&quot;red&quot;, &quot;blue&quot;, &quot;yellow&quot;};\n  for (String color : primaryColors) {\n    if (newColor.equals(color)) {\n      color = newColor;\n    }\n  }\n}\nnewColor = color;  #distractor\npublic void getColor(String newColor) {  #distractor\nif (newColor == color) {  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic void setColor(String newColor) {\n  String[] primaryColors = {\"red\", \"blue\", \"yellow\"};\n  for (String color : primaryColors) {\n    if (newColor.equals(color)) {\n      color = newColor;\n    }\n  }\n}\n```\n\n* Setter methods should start with `set` which is why `public void getColor(String newColor) {` is incorrect.\n* String comparison is done with the `equals` method, which is why `if (newColor == color) {` is incorrect.\n* This method should update the `color` attribute, which is why `newColor = color;` is incorrect.\n",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct a setter with data validation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-333953468",
  "source": {
   "name": "encapsulation lab 1 question",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blanks below with the appropriate access modifier.",
   "showValues": true,
   "text": "The <<<private>>> access modifier means that an instance cannot directly access an attribute or method.\nThe <<<public>>> access modifier means that an instance can directly access an attribute or method.\nThe <<<default>>> access modifier is assumed when no modifier is used before an attribute or method.",
   "distractors": "",
   "guidance": "* The `private` access modifier means an instance cannot directly access an attribute or method. Instead, you have to use a public method (like a getter or a setter) to access private attributes or private methods.\n* The `public` access modifier means that an instance can directly access or modify the attribute or method.\n* If you do not use an access modifier, Java assumes the `default` access modifier, which is similar to `public`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Access Modifiers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/EncapsulationLab1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/EncapsulationLab1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define public, private, and default access modifiers",
   "tokens": {
    "blank": [
     "private",
     "public",
     "default"
    ],
    "text": [
     "The ",
     0,
     " access modifier means that an instance cannot directly access an attribute or method.\nThe ",
     0,
     " access modifier means that an instance can directly access an attribute or method.\nThe ",
     0,
     " access modifier is assumed when no modifier is used before an attribute or method."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3169021649",
  "source": {
   "name": "encapsulation lab 2 question",
   "showName": false,
   "instructions": "## Lab Question\n\nPredict the output of the following code:\n\n```java\nclass TestClass {\n  private String color;\n\n  public TestClass(String c) {\n    color = c;\n  }\n}\n\npublic class LabQuestion {\n  public static void main(String[] args) {\n    TestClass myObject = new TestClass(\"red\");\n    myObject.color = \"blue\";\n    System.out.println(myObject.color);\n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "a89395ba-aed3-f2c4-111e-6b76dbcdb2c0",
     "correct": true,
     "answer": "Error message, `color` is a private attribute."
    },
    {
     "_id": "0c132af5-3b7b-fa34-9727-db8277be9984",
     "correct": false,
     "answer": "`blue`"
    },
    {
     "_id": "941944d3-a64d-648c-7076-915228330db1",
     "correct": false,
     "answer": "`red`"
    }
   ],
   "guidance": "The `color` attribute is private which means an instance cannot access or modify it. Java would throw an error message.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Private Access Modifier"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/EncapsulationLab2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/EncapsulationLab2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT predict output from code"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3946797564",
  "source": {
   "name": "encapsulation lab 3 question",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the following code:\n\n```java\npublic void setAttribute(int newNumber) {\n  if (newNumber % 2 == 0) {\n    number = newNumber;\n  }\n}\n```\n\nSelect all of the true statements about the setter method above. **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "177ed6cf-e5b0-cdee-53a1-6839e7855b7b",
     "correct": true,
     "answer": "The setter method only works with integers"
    },
    {
     "_id": "e7d7aa41-da20-1191-5e59-c33548e78b20",
     "correct": true,
     "answer": "The setter method only works with even numbers"
    },
    {
     "_id": "29bac1db-af60-8b52-d88c-1641d7d5d8e5",
     "correct": false,
     "answer": "The setter method only works with doubles"
    },
    {
     "_id": "38adce83-62e2-3162-f750-e8d1b33b7f71",
     "correct": false,
     "answer": "The setter method only works with odd numbers"
    }
   ],
   "guidance": "The correct answers are:\n\n```\nThe setter method only works with integers\nThe setter method only works with even numbers\n```\n\nThe method header for `setAttribute` requires that an integer be passed to the method. It does not work with any other data type. The `%` operator is modulus which returns the remainder from `newNumber` and `2`. If the parameter is even (no remainder when divided by 2) then the `number` attribute will take a new value.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/EncapsulationLab3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/EncapsulationLab3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how data is being validated"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1447429733",
  "source": {
   "name": "encapsulation lab 4 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat is the output of the following code?\n\n```java\nclass TestClass {\n  private String color;\n\n  public TestClass(String c) {\n    color = c;\n  }\n\n  public void returnColor() {\n    return color;\n  }\n\n  public String changeColor(String newColor) {\n    color = newColor();\n  }\n}\n\npublic class LabQuestion {\n  public static void main(String[] args) {\n    TestClass myObject = new TestClass(\"red\");\n    myObject.changeColor(\"blue\");\n    System.out.println(myObject.returnColor());\n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "6aba3959-1363-14fa-066e-cb8054b491c4",
     "correct": true,
     "answer": "`blue`"
    },
    {
     "_id": "fbfe8913-81a2-1e1c-65ac-24391bb3aa4e",
     "correct": false,
     "answer": "`red`"
    },
    {
     "_id": "55592a79-f93d-f30f-1e93-49f0b5996051",
     "correct": false,
     "answer": "Error message, the getter and setter should be called `getColor` and `setColor`."
    }
   ],
   "guidance": "The code will print `blue`. The convention is to name the getter and setter `getColor` and `setColor`. However, Java will not throw an error message if this convention is ignored.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Getters and Setters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/EncapsulationLab4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/EncapsulationLab4.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": "clear"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify naming conventions for getters and setters"
  }
 },
 {
  "type": "test",
  "taskId": "test-791041872",
  "source": {
   "name": "encapsulation lab challegne",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Person {\n  private String name;\n  private int age;\n  private String occupation;\n  \n  public Person(String n, int a, String o) {\n    name = n;\n    age = a;\n    occupation = o;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String newName) {\n    name = newName;\n  }\n  \n  public int getAge() {\n    return age;\n  }\n  \n  public void setAge(int newAge) {\n    age = newAge;\n  }\n  \n  public String getOccupation() {\n    return occupation;\n  }\n  \n  public void setOccupation(String newOccupation) {\n    occupation = newOccupation;\n  }\n}\n  \n//add class definitions above this line\n\npublic class EncapsulationLabChallenge {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Person myPerson = new Person(\"Citra Curie\", 16, \"student\");\n    \n    System.out.println(myPerson.getName());\n    myPerson.setName(\"Roman Faraday\");\n    System.out.println(myPerson.getName());\n    \n    System.out.println(myPerson.getAge());\n    myPerson.setAge(18);\n    System.out.println(myPerson.getAge());\n    \n    System.out.println(myPerson.getOccupation());\n    myPerson.setOccupation(\"plumber\");\n    System.out.println(myPerson.getOccupation());\n\n    //add code above this line\n  }\n}\n```\n\n* Be sure to use the `private` access modifier for the `name`, `age`, and `occupation` attributes.\n* Follow the naming conventions for the getters and setters in the **Expected Output** section.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Getters and Setters"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/EncapsulationLabChallenge.java",
     "code/encapsulation/EncapsulationLabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/EncapsulationLabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT create a class that makes use of getters and setters"
  }
 },
 {
  "type": "test",
  "taskId": "test-3447362335",
  "source": {
   "name": "encapsulation coding exercise 1",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise1Tester.java\",\"className\":\"CodingExercise1Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass Fruit {\n  private String name;\n  private String color;\n  \n  public Fruit(String n, String c) {\n    name = n;\n    color = c;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String newName) {\n    name = newName;\n  }\n  \n  public String getColor() {\n    return color;\n  }\n  \n  public void setColor(String newColor) {\n    color = newColor;\n  }\n}\n  \n//add class definitions above this line\n\npublic class CodingExercise1 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Fruit myFruit = new Fruit(\"strawberry\", \"red\");\n    \n    System.out.println(myFruit.getName());\n    System.out.println(myFruit.getColor());\n    \n    myFruit.setName(\"tangerine\");\n    myFruit.setColor(\"orange\");\n    System.out.println(myFruit.getName());\n    System.out.println(myFruit.getColor());\n\n    //add code above this line\n  }\n}\n```\n* All attributes should be private\n* The constructor should be public\n* Create a getter and setter for each attribute so that you can access and change them",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Getters, Setters, and Access Modifiers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT convert a class with the default access modifier to a class with encapsulation"
  }
 },
 {
  "type": "test",
  "taskId": "test-3393708180",
  "source": {
   "name": "encapsulation coding exercise 2",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise2Tester.java\",\"className\":\"CodingExercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Watch {\n  private String manufacturer;\n  private String model;\n  private int diameter;\n  private int waterResistance;\n  private String material;\n  \n  public Watch (String ma, String mo, int d, int wr, String mat) {\n    manufacturer = ma;\n    model = mo;\n    diameter = d;\n    waterResistance = wr;\n    material = mat;\n  }\n  \n  public String getManufacturer() {\n    return manufacturer;\n  }\n  \n  public void setManufacturer(String newManufacturer) {\n    manufacturer = newManufacturer;\n  }\n  \n  public String getModel() {\n    return model;\n  }\n  \n  public void setModel(String newModel) {\n    model = newModel;\n  }\n  \n  public int getDiameter() {\n    return diameter;\n  }\n  \n  public void setDiameter(int newDiameter) {\n    diameter = newDiameter;\n  }\n  \n  public int getWaterResistance() {\n    return waterResistance;\n  }\n  \n  public void setWaterResistance(int newWaterResistance) {\n    waterResistance = newWaterResistance;\n  }\n  \n  public String getMaterial() {\n    return material;\n  }\n  \n  public void setMaterial(String newMaterial) {\n    material = newMaterial;\n  }\n  \n  public String summary() {\n    String summary = \"\";\n    summary += \"Manufacturer: \" + capitalize(manufacturer) + \"\\n\";\n    summary += \"Model: \" + capitalize(model) + \"\\n\";\n    summary += \"Diameter: \" + diameter + \" mm\\n\";\n    summary += \"Water Resistance: \" + waterResistance + \" m\\n\";\n    summary += \"Material: \" + capitalize(material);\n    return summary;\n  }\n  \n  private String capitalize(String s) {\n    String capitalizedString = \"\";\n    capitalizedString += s.substring(0, 1).toUpperCase();\n    capitalizedString += s.substring(1);\n    return capitalizedString;\n  }\n}\n  \n//add class definitions above this line\n\npublic class CodingExercise2 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Watch myWatch = new Watch(\"omega\", \"speedmaster\", 42, 50, \"steel\");\n    System.out.println(myWatch.summary());\n\n    //add code above this line\n  }\n}\n```\n\n* All of the attributes should be private\n* Create getters and setters for each of the attributes\n* The summary method needs to return a multiline string. Start with an empty string and then concatenate each line to the string followed by a newline character. There should **not** be a newline character on the last line of the string.\n* The string attributes need to have an uppercase first letter. This task is done in its own private method. Pass in the lowercase string and return a string with the first letter capitalized. Start with an empty string. Use the `substring` to get the first character of the string (`substring(0, 1)`) and capitalize it. Concatenate this to the empty string. Then get the remainder of the string (`substring(1)`) and concatenate this to the string with the capital letter.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Getters, Setters, and a Public Method"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with encapsulation, getters, setters, and a public method"
  }
 },
 {
  "type": "test",
  "taskId": "test-1440786407",
  "source": {
   "name": "encapsulation coding exercise 3",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise3Tester.java\",\"className\":\"CodingExercise3Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Song {\n  private String artist;\n  private String title;\n  private String album;\n  private int playCount;\n  private final double payRate;\n  private double moneyEarned;\n  \n  public Song(String ar, String t, String al, double p) {\n    artist = ar;\n    title = t;\n    album = al;\n    playCount = 0;\n    payRate = p;\n    moneyEarned = 0;\n  }\n  \n  public String getArtist() {\n    return artist;\n  }\n  \n  public void setArtist(String newArtist) {\n    artist = newArtist;\n  }\n  \n  public String getTitle() {\n    return title;\n  }\n  \n  public void setTitle(String newTitle) {\n    title = newTitle;\n  }\n  \n  public String getAlbum() {\n    return album;\n  }\n  \n  public void setAlbum(String newAlbum) {\n    album = newAlbum;\n  }\n  \n  public int getPlayCount() {\n    return playCount;\n  }\n  \n  public void setPlayCount(int newPlayCount) {\n    playCount = newPlayCount;\n  }\n  \n  public double getMoneyEarned() {\n    return moneyEarned;\n  }\n  \n  public double getPayRate() {\n    return payRate;\n  }\n  \n  public void play() {\n    updatePlayCount();\n    updateMoneyEarned();\n  }\n  \n  private void updatePlayCount() {\n    playCount++;\n  }\n  \n  private void updateMoneyEarned() {\n    moneyEarned = playCount * payRate;\n  }\n  \n}\n  \n//add class definitions above this line\n\npublic class CodingExercise3 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Song mySong = new Song(\"led zeppelin\", \"ten years gone\", \"physical graffiti\", 0.001);\n    mySong.play();\n    System.out.println(mySong.getMoneyEarned());\n    for (int i = 0; i < 10000; i++) {\n      mySong.play();\n    }\n    System.out.println(mySong.getMoneyEarned());\n\n    //add code above this line\n  }\n}\n```\n\n* All of the attributes should be private\n* Because the `payRate` attribute is a constant, use the `final` keyword when declaring the attribute\n* The attributes `playCount` and `moneyEarned` should be set to 0 in the constructor\n* All of the attributes should have a getter method\n* All of the attributes **except for** `payRate` and `moneyEarned` should have a setter method\n* In this example, the `play` method calls two private helper methods, `updatePlayCount` and `updateMoneyEarned`\n* `updatePlayCount` increments the `playCount` method by 1\n* `updateMoneyEarned` updates `moneyEarned` to `payRate` multiplied by `playCount`",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Getters, Setters, and Access Modifiers"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with encapsulation, specifically getters, setters, and access modifiers"
  }
 },
 {
  "type": "test",
  "taskId": "test-2521092329",
  "source": {
   "name": "encapsulation coding exercise 4",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise4Tester.java\",\"className\":\"CodingExercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass Atm {\n  private double money;\n  \n  public Atm(double m) {\n    money = m;\n  }\n  \n  public double getMoney() {\n    return money;\n  }\n  \n  public void withdraw(double amount) {\n    if (haveEnoughMoney(amount)) {\n      if (positiveMoney(amount)) {\n         money -= amount;\n      } else {\n        System.out.println(\"You cannot withdraw a negative amount of money.\");\n      }\n    } else {\n      System.out.println(\"You do not have enough funds to withdraw that amount.\");\n    }\n  }\n  \n  public void deposit(double amount) {\n    if (positiveMoney(amount)) {\n      money += amount;\n    } else {\n      System.out.println(\"You cannot deposit a negative amount of money.\");\n    }\n  }\n  \n  private boolean haveEnoughMoney(double amount) {\n    return money > amount;\n  }\n  \n  private boolean positiveMoney(double amount) {\n    return amount >= 0;\n  }\n}\n  \n//add class definitions above this line\n\npublic class CodingExercise4 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Atm myAtm = new Atm(1000);\n    myAtm.deposit(50);\n    System.out.println(myAtm.getMoney());\n    myAtm.withdraw(925);\n    System.out.println(myAtm.getMoney());    \n\n    //add code above this line\n  }\n}\n```\n\n* The only attribute should be `money`\n* `money` has a getter method, but no setter\n* The `withdraw` method needs to test for two different conditions: the amount to be withdrawn is less than the money in the account, and the money to be withdrawn is positive\n* The private method `positiveMoney` asks if the amount of money is positive and returns a boolean value\n* The private method `haveEnoughMoney` asks if the amount of money to be withdrawn is greater than the money in the account and returns a boolean value\n* Data validation for the `deposit` method also uses the `positiveMoney` helper method",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to create a class with encapsulation and data validation"
  }
 },
 {
  "type": "test",
  "taskId": "test-336914172",
  "source": {
   "name": "encapsulation coding exercise 5",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/encapsulation/CodingExercise5Tester.java\",\"className\":\"CodingExercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/encapsulation/exercises\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n    \nclass SodaMachine {\n  private String[] sodas = {\"coke\", \"pepsi\", \"sprite\", \"dr. pepper\"};\n  private int cokeInventory;\n  private int pepsiInventory;\n  private int spriteInventory;\n  private int drPepperInventory;\n  private int money;\n    \n  public SodaMachine() {\n    cokeInventory = 20;\n    pepsiInventory = 20;\n    spriteInventory = 20;\n    drPepperInventory = 20;\n    money = 10;\n  }\n  \n  public String[] getSodas() {\n    return sodas;\n  }\n  \n  public void setSodas(int index, String newSoda) {\n    sodas[index] = newSoda;\n  }\n  \n  public int getCokeInventory() {\n    return cokeInventory;\n  }\n  \n  public void setCokeInventory(int newInventory){\n    cokeInventory = newInventory;\n  }\n  \n  public int getPepsiInventory() {\n    return pepsiInventory;\n  }\n  \n  public void setPepsiInventory(int newInventory){\n    pepsiInventory = newInventory;\n  }\n  \n  public int getSpriteInventory() {\n    return spriteInventory;\n  }\n  \n  public void setSpriteInventory(int newInventory){\n    spriteInventory = newInventory;\n  }\n  \n  public int getDrPepperInventory() {\n    return drPepperInventory;\n  }\n  \n  public void setDrPepperInventory(int newInventory){\n    drPepperInventory = newInventory;\n  }\n  \n  public int getMoney() {\n    return money;\n  }\n  \n  public void setMoney(int newMoney){\n    money = newMoney;\n  }\n  \n  public void buySoda(String soda, int amount) {\n    if (validSoda(soda) && enoughSoda(soda) && enoughMoney(amount)) {\n      updateInventory(soda);\n      updateMoney();\n    }\n  }\n  \n  private boolean validSoda(String soda) {\n    boolean correctSoda = false;\n    \n    for (String s : sodas) {\n      if (soda.equals(s)) {\n        correctSoda = true;\n      }\n    }\n    \n    if (correctSoda == false) {\n      System.out.println(\"That soda is not sold in this machine.\");\n    }\n    return correctSoda;\n  }\n  \n  private boolean enoughMoney(int amount) {\n    if (amount >= 2) {\n      return true;\n    } else {\n      System.out.println(\"You did not insert enough money.\");\n      return false;\n    }\n  }\n  \n  private boolean enoughSoda(String soda) {\n    if (soda.equals(\"coke\")) {\n      if (cokeInventory > 0) {\n        return true;\n      } else {\n        System.out.println(\"There are no cans of Coke.\");\n        return false;\n      }\n    } else if (soda.equals(\"sprite\")) {\n      if (spriteInventory > 0) {\n        return true;\n      } else {\n        System.out.println(\"There are no cans of Sprite.\");\n        return false;\n      }\n    } else if (soda.equals(\"pepsi\")) {\n      if (pepsiInventory > 0) {\n        return true;\n      } else {\n        System.out.println(\"There are no cans of Pepsi.\");\n        return false;\n      }\n    } else if (soda.equals(\"dr. pepper\")) {\n      if (drPepperInventory > 0) {\n        return true;\n      } else {\n        System.out.println(\"There are no cans of Dr. Pepper.\");\n        return false;\n      }\n    }\n    return false;\n  }\n  \n  private void updateInventory(String soda) {\n    if (soda.equals(\"coke\")) {\n      cokeInventory--;\n    } else if (soda.equals(\"sprite\")) {\n      spriteInventory--;\n    } else if (soda.equals(\"pepsi\")) {\n      pepsiInventory--;\n    } else if (soda.equals(\"dr. pepper\")) {\n      drPepperInventory--;\n    }\n  }\n  \n  private void updateMoney() {\n    money += 2;\n  }\n}\n  \n//add class definitions above this line\n\npublic class CodingExercise5 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    SodaMachine myMachine = new SodaMachine();\n    myMachine.buySoda(\"coke\", 4);\n    System.out.println(myMachine.getMoney());\n    System.out.println(myMachine.getCokeInventory());\n\n    //add code above this line\n  }\n}\n```\n\n* Make all attributes private.\n* The constructor does not have any parameters. The initial values were discussed in the list at the top of the page.\n* Create getters and setters for each attribute. These methods follow Java naming conventions. The setter for the `sodas` attribute requires an index and the name of a new soda. All other setters have one parameter.\n* The `buySoda` method is public. It takes the name of the soda to purchase (string) and the amount of money inserted into the machine (integer). In this example, there are five helper methods. Three are for data validation and two are used to update the `SodaMachine` object.\n* `validSoda` takes the name of a soda (string) and validates that this string is found in the `sodas` attribute. This is a helper method and should be marked as `private`.\n* `enoughSoda` takes the name of a soda (string) and validates that there is at least one of them in the inventory. This is a helper method and should be marked as `private`.\n* `enoughMoney` takes the money inserted in the machine (integer) and validates that it is greater than or equal to the price of a soda ($2). This is a helper method and should be marked as `private`.\n* `updateInventory` takes the name of a soda (string) and reduces the inventory attribute for that soda by 1. This is a helper method and should be marked as `private`.\n* `updateMoney` has no parameters and increases the `money` attribute by 2 (the cost of a soda). This is a helper method and should be marked as `private`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Data Validation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Encapsulation"
     }
    ],
    "files": [
     "code/encapsulation/exercises/CodingExercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/encapsulation/exercises/CodingExercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class with encapsulation and data validation"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2434922771",
  "source": {
   "name": "mutability lab 4 question",
   "showName": false,
   "instructions": "## Lab Question\n\nDrag the code blocks into the box below to create a static method called `addition`. This method accepts two integer parameters (`num1` and `num2`) and returns the sum of these two parameters. **Note**, not all of the code blocks will be used, and code blocks must be properly indented.",
   "initial": "static int addition(int num1, int num2) {\n  return num1 + num2;\n}\nint static addition(int num1, int num2) { #distractor\nstatic int addition(double num1, int num2) { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nstatic int addition(int num1, int num2) {\n  return num1 + num2;\n}\n```\n\n* The `static` keyword comes before the return type for the method, which is why `int static addition(int num1, int num2) {` is incorrect.\n* This method takes two integers as parameters, which is why `static int addition(double num1, int num2) {` is incorrect.\n",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Static Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Mutability"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a static method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2081032533",
  "source": {
   "name": "what is inheritance reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nUse the code below to help you answer the question.\n\n```java\nclass XYZ {\n\n}\n\nclass ABC extends XYZ {\n\n}\n```\n\nFrom the options below indicate which class is the superclass and which class is the subclass. **Note**, there are two answers for this problem.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "dff5ea80-0986-416b-8527-e70944d87755",
     "correct": true,
     "answer": "`ABC` is the subclass"
    },
    {
     "_id": "115ae69d-5a5d-3f2f-8113-4877eec8253c",
     "correct": true,
     "answer": "`XYZ` is the superclass"
    },
    {
     "_id": "aafa253c-2311-09a9-4dea-bd2c5b4a4afa",
     "correct": false,
     "answer": "`ABC` is the superclass"
    },
    {
     "_id": "471538a5-802c-56d5-5e24-73ce8e098205",
     "correct": false,
     "answer": "`XYZ` is the subclass"
    }
   ],
   "guidance": "The correct answers are:\n* `ABC` is the subclass\n* `XYZ` is the superclass\n\nBecause the definition of `ABC` contains `extends XYZ`, `ABC` is the subclass. That means `XYZ` must be the superclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Superclass and Subclass"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/WhatIsInheritance.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/WhatIsInheritance.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT distinguish between the superclass and the subclass"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2940799859",
  "source": {
   "name": "super keyword reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat does the keyword `super` refer to?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "30f415ed-65d4-eef9-6529-648308b7f3ab",
     "correct": true,
     "answer": "The superclass"
    },
    {
     "_id": "674f7527-ce02-8aa5-63a2-938435fbff14",
     "correct": false,
     "answer": "The subclass"
    },
    {
     "_id": "4cecb445-23f7-95ab-eee1-619b27638fe4",
     "correct": false,
     "answer": "A newly instantiated object"
    }
   ],
   "guidance": "The keyword `super` refers to the superclass, which is sometimes called the parent class. For example, calling `super` in the constructor of the subclass will call the constructor of the superclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Super Keyword"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/Super.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/Super.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify to what the super keyword refers"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1313898131",
  "source": {
   "name": "inheritance hierarchy reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhen does the `instanceof` operator return `true`? **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "a6123970-5bc7-8547-f1ac-605987edcbbc",
     "correct": true,
     "answer": "When the object is an instance of the same class."
    },
    {
     "_id": "186ae633-3985-468b-540b-14e307a6449c",
     "correct": true,
     "answer": "When the object is an instance of the subclass."
    },
    {
     "_id": "29a49127-eb0f-811c-2a68-14a2460067c4",
     "correct": false,
     "answer": "When the object is an instance of the superclass."
    },
    {
     "_id": "e3b704f4-cad6-4fcd-247b-a1554c674170",
     "correct": false,
     "answer": "Whenever inheritance is used."
    }
   ],
   "guidance": "The correct answers are:\n* `When the object is an instance of the same class.`\n* `When the object is an instance of the subclass.`\n\nThe `instanceof` operator compares an object and a class. If the object has the same type as the comparison class it returns `true`. It also returns `true` when the object is a subclass of the comparison class.\n\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Inheritance Hiearchy, Superclasses and Subclasses"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/Hierarchy.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/Hierarchy.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT test for inheritance hierarchy"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2353549155",
  "source": {
   "name": "superclass & subclass formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following class:\n\n```java\nclass Pet {\n  private String name;\n}\n```\n\nSelect the code that creates the `Dog` class that inherits from `Pet`.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "69268177-491b-44cb-927f-0a97bb4c03f9",
     "correct": true,
     "answer": "```java\nclass Dog extends Pet {}\n```"
    },
    {
     "_id": "077111a3-6b8a-b641-f1f8-4f303e215c4c",
     "correct": false,
     "answer": "```java\nclass Dog inherits Pet {}\n```"
    },
    {
     "_id": "fcdea550-a444-a47f-1cb5-55ecbe05caec",
     "correct": false,
     "answer": "```java\nclass Dog(Pet) {}\n```"
    },
    {
     "_id": "3e8ac4a3-db8d-98f9-651e-b580dc21fcb6",
     "correct": false,
     "answer": "```java\nclass Dog extend Pet {}\n```"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nclass Dog extends Pet {}\n```\n\nJava uses the `extends` keyword to indicate inheritance.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Create a Subclass"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/Hierarchy.java"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a subclass"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-255782616",
  "source": {
   "name": "superclass & subclass formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Dog {\n  private String name;\n  private String breed;\n\n  public Dog(String n, String b) {\n    name = n;\n    breed = b;\n  }\n}\n```\n\nRearrange the code blocks below to create the subclass `Pug` that calls the constructor from the superclass with arguments. **Hint**, not all code blocks will be used, and they must be properly indented.",
   "initial": "class Pug extends Dog {\n  public Pug(String n, String b) {\n    super(n, b);\n  }\n}\nDog(n, b); #distractor\nclass Pug inherits Dog { #distractor\npublic Pug() { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\nclass Pug extends Dog {\n  public Pug(String n, String b) {\n    super(n, b);\n  }\n}\n```\n\nCreate a public constructor that has the same parameters as the superclass. Within the constructor, use the `super` keyword and pass it the parameters. Java will call the constructor from the superclass with the appropriate parameters.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Super Keyword"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT call the constructor from the superclass with arguments"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-678926361",
  "source": {
   "name": "extending a class reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Pet {\n  private String name;\n  private String age;\n\n  public Pet(String n, String a) {\n    name = n;\n    age = a;\n  }\n}\n```\n\nUsing the code blocks below, create the class `Dog` that inherits from `Pet`. In addition, extend the constructor to have the attribute `breed`.  **Hint**, not all of the code blocks will be used, and the code blocks must be properly indented.",
   "initial": "class Dog extends Pet {\n  private String breed;\n  public Dog(String n, String a, String b) {\n    super(n, a);\n    breed = b;\n  }\n}\nclass Pet extends Dog { #distractor\npublic Dog(String n, String a) { #distractor\nsuper(n, a, b); #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Here is the correct answer:\n\n```java\nclass Dog extends Pet {\n  private String breed;\n  public Dog(String n, String a, String b) {\n    super(n, a);\n    breed = b;\n  }\n}\n```\n\n* The `Dog` class extends the `Pet` class, not the other way around.\n* Declare the `breed` attribute.\n* The constructor for `Dog` needs all of the parameters of the `Pet` class plus the parameter for `breed`.\n* The `Pet` constructor only takes two arguments, so only pass it information for the `name` and `age` attributes.\n* Initialize the `breed` attribute in the `Dog` constructor.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Extend a Class"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/ExtendClass.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/ExtendClass.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT extend the constructor of the superclass"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1159177153",
  "source": {
   "name": "method overriding reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the statements that are true for method overriding and extending a class. **Hint:** there is more than one correct answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "c7e83a29-2ed3-a1fa-9b9b-4b590a184c48",
     "correct": true,
     "answer": "Extending a class happens when new attributes or methods are added to the subclass that do not exist in the superclass."
    },
    {
     "_id": "a29a60c4-fa48-8862-ef5d-3dec648677ba",
     "correct": true,
     "answer": "Method overriding happens when the subclass has a method with the same name as the superclass, but the subclass's method does something different."
    },
    {
     "_id": "c544c606-b734-d987-7e1b-e116a16357b6",
     "correct": false,
     "answer": "Method overriding happens when new attributes or methods are added to the subclass that do not exist in the superclass."
    },
    {
     "_id": "39a81076-3aa7-4158-5d20-637561804d44",
     "correct": false,
     "answer": "Extending a class happens when the subclass has a method with the same name as the superclass, but the subclass's method does something different."
    }
   ],
   "guidance": "The correct answers are:\n\n* Method overriding happens when the subclass has a method with the same name as the superclass, but the subclass's method does something different.\n* Extending a class happens when new attributes or methods are added to the subclass that do not exist in the superclass.\n\nThe other two choices are incorrect because they have confused \"method overriding\" with the definition for \"extending a class\" and vice versa.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Extending & Overriding a Class"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/OverrideMethod.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/OverrideMethod.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between extending a class and method overriding"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1932407461",
  "source": {
   "name": "Extending & Overriding Formative Assessment 1",
   "showName": false,
   "instructions": "Assume the following code:\n\n```java\nclass Car{\n  private String make;\n  private String model;\n  private String color;\n\n  public Car(String ma, String mo, String c) {\n    make = ma;\n    model = mo;\n    color = c;\n  }\n\n  public String getMake() {\n    return make;\n  }\n\n  public String getModel() {\n    return model;\n  }\n\n  public String getColor() {\n    return color;\n  }\n}\n```\n\nCreate the subclass `Sedan`. Extend this class by adding the `describe` method. This method prints the string `I am a red Toyota Camry.` \"Toyota\" is the make and \"Camry\" is the model. \n\nDrag the appropriate code blocks into the box below. **Hint:** not all of the code blocks will be used, and the code blocks must be properly indented.",
   "initial": "class Sedan extends Car {\n  public Sedan(String ma, String mo, String c) {\n    super(ma, mo, c);\n  }\n  public void describe() {\n    System.out.print(&quot;I am a &quot; + getColor() + &quot; &quot;);\n    System.out.println(getMake() + &quot; &quot; + getModel() + &quot;.&quot;);\n  }\n}\nSystem.out.print(&quot;I am a &quot; + color + &quot; &quot;);  #distractor\nSystem.out.println(make + &quot; &quot; + model + &quot;.&quot;);  #distractor\nclass Sedan {  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Here is the answer: \n\n```java\nclass Sedan extends Car {\n  public Sedan(String ma, String mo, String c) {\n    super(ma, mo, c);\n  }\n  public void describe() {\n    System.out.print(\"I am a \" + getColor() + \" \");\n    System.out.println(getMake() + \" \" + getModel() + \".\");\n  }\n}\n```\n\n* The `Sedan` class should inherit from the `Car` class, so be sure to use the `extends` keyword.\n* The `Sedan` class needs to invoke a `Car` constructor to pass it three arguments. Use the `super` keyword for this.\n* The `make`, `model`, and `color` keywords are a part of the superclass, so you need to use the getter methods to access these values.\n\n",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Extending a Class"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT extend the subclass with a new method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3124334261",
  "source": {
   "name": "extending & overriding formative assessment 2",
   "showName": false,
   "instructions": "Assume the following code:\n\n```java\nclass SportsCar extends Car{\n  private double acceleration;\n\n  public SportsCar(String self, String ma, String mo, String c, double a) {\n    super(ma, mo, c);\n    acceleration = a;\n  }\n\n  public void acceleration(super) {\n    System.out.println(\"0 to 60 in \" + acceleration + \" seconds!\");\n  }\n}\n```\n\nThe `SportsCar` class inherits from the `Car` class and the `acceleration` method overrides a method from the superclass. What is wrong with the `acceleration` method?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "7d7819b5-886d-113b-6e44-7d8111da189a",
     "correct": true,
     "answer": "The method declaration should be:\n```java\n  public void acceleration() {\n    System.out.println(\"0 to 60 in \" + acceleration + \" seconds!\");\n  }\n```"
    },
    {
     "_id": "90bf200d-e249-6a35-5f3e-5fa16dfd5918",
     "correct": false,
     "answer": "The method declaration should be:\n```java\n  public void acceleration extends acceleration() {\n    System.out.println(\"0 to 60 in \" + acceleration + \" seconds!\");\n  }\n```"
    },
    {
     "_id": "3a81a2c4-b528-38f0-6e48-07df224072cf",
     "correct": false,
     "answer": "The method declaration should be:\n```java\n  public void acceleration() {\n    super.acceleration();\n  }\n```"
    },
    {
     "_id": "dcbc957c-2570-fa8c-a5bb-b6d262033802",
     "correct": false,
     "answer": "The method declaration should be:\n```java\n  public void acceleration() {\n    System.out.println(\"0 to 60 in \" + getAcceleration() + \" seconds!\");\n  }\n```"
    }
   ],
   "guidance": "You do not need to use any special key words to tell Java that the current method is overriding a method from the superclass. Method declarations and method overriding look the same from the declaration point of view.\n\n```java\n  public void acceleration() {\n    System.out.println(\"0 to 60 in \" + acceleration + \" seconds!\");\n  }\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Overridng a Method"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT override a method from a superclass"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3981125571",
  "source": {
   "name": "overriding annotation reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass Train {\n  private int cars;\n\n  public Train() {\n    cars = 10;\n  }\n\n  public int getCars() {\n    return cars;\n  }\n\n  public void length() {\n    System.out.println(\"The train has \" + cars + \" cars.\");\n  }\n}\n```\n\nFill in the blanks to complete the `FreightTrain` method which extends the `Train` class and overrides the `length` method.",
   "showValues": true,
   "text": "```\nclass <<<FreightTrain>>> extends <<<Train>>> {\n  <<<@Override>>>\n  public void <<<length>>>() {\n    System.out.println(\"The train has \" + <<<getCars()>>> + \" freight cars.\");\n  }\n}\n```",
   "distractors": "cars\nOverride\n@Extends",
   "guidance": "The correct answer is:\n\n```java\nclass FreightTrain extends Train {\n  @Override\n  public void length() {\n    System.out.println(\"The train has \" + getCars() + \" freight cars.\");\n  }\n}\n```\n\n* When using the `extends` keyword, the subclass (`FreightTrain`) comes before and the superclass (`Train`) comes after.\n* The correct annotation for override is `@Override`.\n* You are overriding the `length` method, so make sure it appears in the `FreightTrain` class.\n* The `cars` attribute is private to the superclass, so use `getCars` to access it.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Overriding Annotation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/OverridingAnnotation.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/OverridingAnnotation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT annotate when overriding a method",
   "tokens": {
    "blank": [
     "FreightTrain",
     "Train",
     "@Override",
     "length",
     "getCars()"
    ],
    "text": [
     "```\nclass ",
     0,
     " extends ",
     0,
     " {\n  ",
     0,
     "\n  public void ",
     0,
     "() {\n    System.out.println(\"The train has \" + ",
     0,
     " + \" freight cars.\");\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1007431142",
  "source": {
   "name": "multiple inheritance reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhy does Java not allow for multiple inheritance where two or more superclasses are of different data types?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "9958e615-4d58-b510-a928-8c24252e6371",
     "correct": true,
     "answer": "This type of multiple inheritance leads to ambiguity."
    },
    {
     "_id": "fd738f95-76e8-cf26-9d83-4369e52e5ca4",
     "correct": false,
     "answer": "This type of multiple inheritance is impossible. No programming languages allow for this type of multiple inheritance."
    },
    {
     "_id": "08823efb-d564-26d5-4c4b-e1600354910c",
     "correct": false,
     "answer": "Trick question, this type of multiple inheritance is allowed."
    },
    {
     "_id": "0cc02e8a-aa68-942b-5f03-d3d440ac189a",
     "correct": false,
     "answer": "This type of multiple inheritance causes a syntax error."
    }
   ],
   "guidance": "Multiple inheritance where the superclasses have different data types leads to ambiguity. Imagine that each superclass has a method with the same name. Java cannot tell which method to invoke if the subclass calls this method. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Multiple Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/MultipleInheritance.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/MultipleInheritance.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT explain why multiple inheritance with superclasses of different types is not allowed"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2412811547",
  "source": {
   "name": "substitution principle reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "The substitution principle states that a substitution can be made if a <<<subclass>>> is used in place of its <<<superclass>>>.",
   "distractors": "class\nmethod\nobject",
   "guidance": "The substitution works when a subclass is used in place of its superclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Subsitution Principle"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/Substitution.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/Substitution.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the substitution principle",
   "tokens": {
    "blank": [
     "subclass",
     "superclass"
    ],
    "text": [
     "The substitution principle states that a substitution can be made if a ",
     0,
     " is used in place of its ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-154590934",
  "source": {
   "name": "extending and overriding multilevel inheritance reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nUse the image below to help you fill in the blanks.\n\n![Reading Question](.guides/img/inheritance/multilevel_reading_question.png)",
   "showValues": true,
   "text": "<<<Code sample 1>>> is an example of extending a class.\n<<<Code sample 2>>> is an example of overriding a method.",
   "distractors": "",
   "guidance": "Extending a class is when a new method is added to the subclass that is not present in either superclass. Overriding a method is when the subclass has a method that shares a name with a method from a superclass, but the subclass method performs a different task.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Multilevel Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/MultilevelExtendOverride.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/MultilevelExtendOverride.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between extending and overriding in multilevel inheritance",
   "tokens": {
    "blank": [
     "Code sample 1",
     "Code sample 2"
    ],
    "text": [
     0,
     " is an example of extending a class.\n",
     0,
     " is an example of overriding a method."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1778577812",
  "source": {
   "name": "multiple inheritance hierarchy reading question",
   "showName": false,
   "instructions": "Assume the following code:\n\n```java\nBravo b = new Bravo();\nDelta d = new Delta();\n\nb.display();\nd.display();\n```\n\nWhich produces the following output:\n\n```markdown\nBravo\nAlpha\nDelta\nCharlie\nAlpha\n```\n\nUsing the above information, fill in the blanks for inheritance.",
   "showValues": true,
   "text": "```markdown\nclass Alpha() {\n  public void display() {\n    System.out.println(\"Alpha\");\n  }\n}\n\nclass Bravo() <<<extends Alpha>>> {\n  public void display() {\n    System.out.println(\"Bravo\");\n    super.display();\n  }\n}\n\nclass Charlie() <<<extends Alpha>>> {\n  public void display() {\n    System.out.println(\"Charlie\");\n    super.display();\n  }\n}\n\nclass Delta <<<extends Charlie>>> () {\n  public void display() {\n    System.out.println(\"Delta\");\n    super.display();\n  }\n}\n```",
   "distractors": "extends Bravo\nextends Delta",
   "guidance": "Here is the solution:\n\n```java\nclass Alpha() {\n  public void display() {\n    System.out.println(\"Alpha\");\n  }\n}\n\nclass Bravo() extends Alpha {\n  public void display() {\n    System.out.println(\"Bravo\");\n    super.display();\n  }\n}\n\nclass Charlie() extends Alpha {\n  public void display() {\n    System.out.println(\"Charlie\");\n    super.display();\n  }\n}\n\nclass Delta extends Charlie () {\n  public void display() {\n    System.out.println(\"Delta\");\n    super.display();\n  }\n}\n```\n\n* The `b` object runs the `display` method which prints `Bravo`. \n* The next line of output is `Alpha` which means `super` refers to class `Alpha`. Therefore, class `Bravo` extends class `Alpha`.\n* The `d` object runs the `display` method which prints `Delta`. However, there are two more lines of output. That means class `Delta` has multilevel inheritance.\n* The next line of output is `Charlie` which means `super` refers to class `Charlie`. Therefore, class `Delta` extends class `Charlie`.\n* Finally, calling `display` in class `Charlie` must also print `Alpha`. That means class `Charlie` extends class `Alpha`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Multilevel Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/MultilevelHierarchy.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/MultilevelHierarchy.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT choose the proper inheritance scheme to match a given output",
   "tokens": {
    "blank": [
     "extends Alpha",
     "extends Alpha",
     "extends Charlie"
    ],
    "text": [
     "```markdown\nclass Alpha() {\n  public void display() {\n    System.out.println(\"Alpha\");\n  }\n}\n\nclass Bravo() ",
     0,
     " {\n  public void display() {\n    System.out.println(\"Bravo\");\n    super.display();\n  }\n}\n\nclass Charlie() ",
     0,
     " {\n  public void display() {\n    System.out.println(\"Charlie\");\n    super.display();\n  }\n}\n\nclass Delta ",
     0,
     " () {\n  public void display() {\n    System.out.println(\"Delta\");\n    super.display();\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2513308691",
  "source": {
   "name": "prohibit overriding reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nRearrange the code blocks into the box below to create a method that cannot be overriden. **Hint**, not all of the code blocks will be used, and the blocks need to be properly indented.",
   "initial": "public final void immutable() {\n  System.out.println(&quot;Cannot override this method&quot;);\n}\npublic void immutable(final) { #distractor\npublic void immutable() extends final { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\npublic final void immutable() {\n  System.out.println(\"Cannot override this method\");\n}\n```\n\n* The `final` keyword comes before data type. Only parameters go between the parentheses.\n* Method declarations do not use the `extends` keyword,",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Prohibit Overriding"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/ProhibitOverriding.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/ProhibitOverriding.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a method that cannot be overriden"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1464079495",
  "source": {
   "name": "multiple inheritance formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume **only** the following code:\n\n```java\nclass Foxtrot extends Golf {\n  public void hello() {\n    System.out.println(\"hello\");\n    super.hello();\n  }\n}\n\nclass Echo extends Foxtrot {\n  public void hello() {\n    System.out.println(\"hello world\");\n  }\n}\n```\n\nSelect all of the true statements. **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "a16f0be4-b071-1010-b57d-e52b7569ff31",
     "correct": true,
     "answer": "Class `Foxtrot` overrides the `hello` method."
    },
    {
     "_id": "8cfaa0d5-de61-780e-228b-6856ec6f2a2e",
     "correct": true,
     "answer": "Class `Foxtrot` is a superclass to `Echo` and a subclass to `Golf`."
    },
    {
     "_id": "800bc164-7532-53e9-536e-015e559a70be",
     "correct": true,
     "answer": "Class `Echo` is an example of multilevel inheritance."
    },
    {
     "_id": "782734e9-329d-1e3c-8656-e1465f42ede9",
     "correct": false,
     "answer": "You can substitute class `Golf` for class `Echo`."
    }
   ],
   "guidance": "The correct answers are:\n* `Class `Foxtrot` overrides the `hello` method.` This is true because `super.hello` means another method `hello` exists in the superclass.\n* `Class `Foxtrot` is a superclass to `Echo` and a subclass to `Golf`.` This is true because `Foxtrot` extends `Golf` and `Echo` extends `Foxtrot`.\n* `Class `Echo` is an example of multilevel inheritance.` This is true because it inherits from `Foxtrot` who in turn inherits from `Golf`.\n\nThe substitution principle only works when you substitute a subclass for a superclass. `Golf` is a superclass to `Echno`, so the substitution does not work.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Multilevel Inheritance, Inheritancy Hierarchy, Method Overriding"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT make inferences about multilevel inheritance, inheritance hierarchy, and method overriding"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1205746188",
  "source": {
   "name": "multiple inheritance formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Human {\n  private String name;\n  public Human(String n) {\n    name = n;\n  }\n}\n\nclass Adult extends Human {\n  private int numChildren;\n  public Human(String n, int c) {\n    super(n);\n    numChildren = c;\n  }\n}\n```\n\nUse these superclasses to fill in the blanks below. The class `Parent` should inherit the attributes `name` and `numChildren`.",
   "showValues": true,
   "text": "```python\nclass Parent <<<extends Adult>>> {\n  public Parent(<<<String n>>>, int c) {\n    <<<super>>>(n, <<<c>>>);\n  }\n}\n```",
   "distractors": "extends Human\nString name\nfinal\nnumChildren",
   "guidance": "The correct answer is:\n\n```java\nclass Parent extends Adult {\n  public Parent(String n, int c) {\n    super(n, c);\n  }\n}\n```\n\n* The `Parent` class must have the `name` and `numChildren` attributes. To do that, inherit from `Adult` who then inherits from `Human`\n* The constructor uses the variable `n`, so the parameter should be `String n` not `String name`.\n* The constructor has the parameter `c`, so the variable should be `c` not `numChildren`.\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Multilevel Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create a class with multilevel inheritance",
   "tokens": {
    "blank": [
     "extends Adult",
     "String n",
     "super",
     "c"
    ],
    "text": [
     "```python\nclass Parent ",
     0,
     " {\n  public Parent(",
     0,
     ", int c) {\n    ",
     0,
     "(n, ",
     0,
     ");\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2287591926",
  "source": {
   "name": "inheritance lab 1 question",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the following code:\n\n```java\nclass Golf extends India {}\nclass Hotel {}\nclass India extends Hotel {}\n```\n\nWhich one of the three classes is **both** a superclass and a subclass?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "d98e01fd-bb00-dd90-b09f-290e3334245f",
     "correct": true,
     "answer": "India"
    },
    {
     "_id": "baf5bbf1-3f2e-b127-8044-5ead8a41740b",
     "correct": false,
     "answer": "Hotel"
    },
    {
     "_id": "21e5b404-a4b8-d689-9dc9-a60442f3e831",
     "correct": false,
     "answer": "Golf"
    }
   ],
   "guidance": "The correct answer is:\n\n```markdown\nIndia\n```\n\n* `Golf` extends `India`, so it is a subclass. However, nothing extends `Golf` so it is not a superclass.\n* `Hotel` does not extend any classes so it is not a subclass. `India` extends `Hotel`, so `Hotel` is a superclass.\n*  `India` extends `Hotel` so it is a subclass. In addition, `Golf` extends `India` so `India` is a superclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Inheritance Hiearchy "
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Multiple Inheritance"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify inheritance hierarchy order"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1306573375",
  "source": {
   "name": "inheritance lab 2 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat will the following code produce?\n\n```java\nclass Juliet {}\nclass Kilo extends Juliet {}\n\npublic class LabQuestion {  \n  public static void main(String[] args) {\n  Kilo k = new Kilo();\n  System.out.println(k instanceof Juliet);  \n  }\n}\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "f0d992ca-eae5-e2b8-5be6-e2ddc0632284",
     "correct": true,
     "answer": "true"
    },
    {
     "_id": "60c5a9bc-0cfb-fb25-a664-06f9593e294b",
     "correct": false,
     "answer": "false"
    }
   ],
   "guidance": "The code would print `true` because object `k` is an instance of the `Kilo` class, and the `Kilo` class inherits from the `Juliet` class. Therefore, `k` is an instance of the `Juliet` class.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Inheritance Hiearchy "
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT determine if an object is an instance of another class"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1112060896",
  "source": {
   "name": "inheritance lab 3 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhich principle means the code below is valid?\n\n```java\nclass A {}\nclass B extends A {}\n\npublic A myMethod(A objA) {}\n\nB objB = new B();\nmyMethod(objB);\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "e38bee61-d2ef-310a-7b08-cbf59a8bcc07",
     "correct": true,
     "answer": "Substitution principle"
    },
    {
     "_id": "8163783c-9128-aeaf-ccf9-7357bf6b2ec1",
     "correct": false,
     "answer": "Inheritance"
    },
    {
     "_id": "1eba07ff-5293-3e63-b841-ffb5c97d0354",
     "correct": false,
     "answer": "Exchange principle"
    },
    {
     "_id": "796dc350-e8b1-79f8-ea98-ec5ddc47ddd4",
     "correct": false,
     "answer": "Multilevel inheritance"
    }
   ],
   "guidance": "The substitution principle says that a subclass can be used in place of the superclass. Since `myMethod` has a parameter of type `A` and `B` is a subclass of `A`, an object of type `B` can be passed to `myMethod`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Substitution principle"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recognize the substitution principle in action"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-172195837",
  "source": {
   "name": "inheritance lab 4 question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhich keyword will allow a subclass to access a method but not override it?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "cffa03e5-80a8-5582-ea70-1a6ad40d4e24",
     "correct": true,
     "answer": "`final`"
    },
    {
     "_id": "a777c6b5-6623-dcbf-2910-598a4aaf63bf",
     "correct": false,
     "answer": "`private`"
    },
    {
     "_id": "7556d497-f3a2-3c0d-3808-8a1a2d0ef4cb",
     "correct": false,
     "answer": "`static`"
    },
    {
     "_id": "622ead6a-8e70-7b78-5c47-5fc8a9f542f7",
     "correct": false,
     "answer": "`restricted`"
    }
   ],
   "guidance": "The `final` keyword means that a subclass can access the method, but it cannot override it.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Prohibit Overriding"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT explain what the \"final\" keyword does in a method of a superclass"
  }
 },
 {
  "type": "test",
  "taskId": "test-847910647",
  "source": {
   "name": "inheritance lab challenge",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/inheritance/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/inheritance/labChallenge\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass Podcast extends MP3 {\n  private String name;\n  private String date;\n  \n  public Podcast(String n, String t, int l, String g, String d) {\n    name = n;\n    setTitle(t);\n    setLength(l);\n    setGenre(g);\n    date = d;\n  }\n  \n  public String displayName() {\n    return \"The name is \" + name;\n  }\n  \n  public String displayTitle() {\n    return \"The title is \" + getTitle();\n  }\n  \n  public String displayLength() {\n    int minutes = getLength() / 60;\n    int seconds = getLength() % 60;\n    return \"The length is \" + minutes + \" minutes and \" + seconds + \" seconds\";\n  }\n  \n  public String displayGenre() {\n    return \"The genre is \" + getGenre();\n  }\n  \n  public String displayDate() {\n    return \"The date is \" + date;\n  }\n}\n\n//add class definitions above this line\n\npublic class LabChallenge {\n  public static void main(String[] args) {\n    \n    //add code below this line\n  \n    Podcast p = new Podcast(\"Planet Money\", \"Hollywood's Black List\", 1460, \"economics\", \"10 July 2020\");\n    System.out.println(p.displayName());\n    System.out.println(p.displayTitle());\n    System.out.println(p.displayLength());\n    System.out.println(p.displayGenre());\n    System.out.println(p.displayDate());\n  \n    //add code above this line   \n  }\n}\n```\n\n* Create the `name` and `date` attributes for the `Podcast` class.\n* The constructor requires `name`, `title`, `length`, `genre`, and `date` as parameters.\n* Set the `name` and `date` attributes like normal.\n* Use setter methods to set the attributes `title`, `length`, and `genre`.\n* The `displayName` and `displayDate` methods concatenate the required text and `name` and `date` attributes.\n* The `displayTitle` and `displayGenre` methods concatenate the required text and the getter methods for the `title` and `genre` attributes.\n* The `displayLength` method needs to transform seconds into minutes and seconds. To calculate minutes, divide `getLength()` by `60`. Since these numbers are both integers, Java will truncate the decimal output (it will not round up or down). To calculate the seconds, use `getLength()` modulo (`%`) `60`. This will return the remainder when dividing the length by 60.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Overrinding and Extending"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/labChallenge/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/labChallenge/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT construct a class that overrides and extends the parent class"
  }
 },
 {
  "type": "test",
  "taskId": "test-51862033",
  "source": {
   "name": "inheritance coding exercise 1",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/inheritance/Exercise1Tester.java\",\"className\":\"Exercise1Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/inheritance/exercise1\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass Satellite extends CelestialBody {\n  private String hostPlanet;\n  \n  public Satellite(double s, double m, String c, String n, String h) {\n    super(s, m, c, n);\n    hostPlanet = h;\n  }\n  \n  public String getHostPlanet() {\n    return hostPlanet;\n  }\n  \n  public void setHostPlanet(String newHostPlanet) {\n    hostPlanet = newHostPlanet;\n  }\n}\n\nclass Planet extends CelestialBody {\n  private String hostStar;\n  \n  public Planet(double s, double m, String c, String n, String st) {\n    super(s, m, c, n);\n    hostStar = st;\n  }\n  \n  public String getHostStar() {\n    return hostStar;\n  }\n  \n  public void setHostStar(String newHostStar) {\n    hostStar = newHostStar;\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise1 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n  \n    Satellite s = new Satellite(2651, 3716, \"helium\", \"moon\", \"earth\");\n    Planet p = new Planet(5349, 8910, \"nitrogen\", \"earth\", \"sun\");\n    \n    System.out.println(s.getSize());\n    System.out.println(s.getMass());\n    System.out.println(s.getComposition());\n    System.out.println(s.getName());\n    System.out.println(s.getHostPlanet());\n    System.out.println(p.getSize());\n    System.out.println(p.getMass());\n    System.out.println(p.getComposition());\n    System.out.println(p.getName());\n    System.out.println(p.getHostStar());\n  \n    //add code above this line   \n  }\n}\n```\n\n### For the `Satellite` class:\n* Inherit from the `CelestialBody` class.\n* Create the attribute `hostPlanet`.\n* Create a constructor with the arguments for the superclass and `hostPlanet`.\n* Call the constructor from the superclass with `super` and pass it the required arguments.\n* Assign a value to the `hostPlanet` attribute.\n* Create a getter and setter for `hostPlanet`.\n\n### For the `Planet` class:\n* Inherit from the `CelestialBody` class.\n* Create the attribute `hostStar`.\n* Create a constructor with the arguments for the superclass and `hostStar`.\n* Call the constructor from the superclass with `super` and pass it the required arguments.\n* Assign a value to the `hostStar` attribute.\n* Create a getter and setter for `hostStar`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Extend the constructor"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/exercise1/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/exercise1/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT extend the constructor of the parent class"
  }
 },
 {
  "type": "test",
  "taskId": "test-3351852341",
  "source": {
   "name": "inheritance coding exercise 2",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/inheritance/Exercise2Tester.java\",\"className\":\"Exercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/inheritance/exercise2\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass BlogPost extends Book {\n  private String website;\n  private int wordCount;\n  private int pageViews;\n  \n  public BlogPost (String t, String a, String g, String w, int wc, int pv) {\n    super(t, a, g);\n    website = w;\n    wordCount = wc;\n    pageViews = pv;\n  }\n  \n  public String getWebsite() {\n    return website;\n  }\n  \n  public void setWebsite(String newWebsite) {\n    website = newWebsite;\n  }\n  \n  public int getWordCount() {\n    return wordCount;\n  }\n  \n  public void setWordCount(int newWordCount) {\n    wordCount = newWordCount;\n  }\n  \n  public int getPageViews() {\n    return pageViews;\n  }\n  \n  public void setPageViews(int newPageViews) {\n    pageViews = newPageViews;\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise2 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n  \n    BlogPost myPost = new BlogPost(\"Hot Summer Trends\", \"Amy Gutierrez\", \"fashion\", \"Vogue\", 2319, 2748);\n    \n    System.out.println(myPost.getWebsite());\n    System.out.println(myPost.getTitle());\n    System.out.println(myPost.getAuthor());\n    System.out.println(myPost.getWordCount());\n    System.out.println(myPost.getGenre());\n    System.out.println(myPost.getPageViews());\n  \n    //add code above this line   \n  }\n}\n```\n\n* Create the `BlogPost` class that inherits from the `Book` class.\n* Create the attributes `website`, `wordCount`, and `pageViews`.\n* The `BlogPost` constructor takes the same arguments as the `Book` class plus the three attributes unique to the `BlogPost` class.\n* Use the `super` keyword and pass it the `title`, `author`, and `genre` attributes.\n* Initialize the `website`, `wordCount`, and `pageViews` attributes.\n* Create getters and setters for `website`, `wordCount`, and `pageViews`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Extend the constructor"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/exercise2/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/exercise2/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT extend the constructor of the parent class"
  }
 },
 {
  "type": "test",
  "taskId": "test-665191771",
  "source": {
   "name": "inheritance coding exercise 3",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/inheritance/Exercise3Tester.java\",\"className\":\"Exercise3Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/inheritance/exercise3\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nclass Parent1 {\n  public String identify() {\n    return \"This method is called from Parent1\";\n  }\n}\n\nclass Parent2 extends Parent1 {\n  public String identify() {\n    return \"This method is called from Parent2\";\n  }\n  \n  public String identify2() {\n    return super.identify();\n  }\n}\n\n//add class definitions below this line\n\nclass Child extends Parent2 {\n  public String identify() {\n    return \"This method is called from Child\";\n  }\n  \n  public String identify2() {\n    return super.identify();\n  }\n  \n  public String identify3() {\n    return super.identify2();\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise3 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n  \n    Child childObject = new Child();\n    System.out.println(childObject.identify());\n    System.out.println(childObject.identify2());\n    System.out.println(childObject.identify3());\n  \n    //add code above this line   \n  }\n}\n```\n\n### `Parent1` Class\nNo changes need to be made to this class.\n\n### `Parent2` Class\n* Make this class inherit from `Parent1`.\n* Create a methods that calls the `identify` method from the `Parent1` class with the `super` keyword. In this case, the method is called `identify2`.\n\n### `Child` Class\n* Create this class and make it inherit from `Parent2`.\n* Override the `identify` class so the message references the `Child` class.\n* Create the `identify2` method that uses the `super` keyword to call `identify` from `Parent2`.\n* Create the `identify3` method that uses the `super` keyword to call the method in `Parent2` that references the `identify` method in the `Parent1` class. In this case, the method call is `super.identify2()`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Multilevel Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/exercise3/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/exercise3/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a class that has multilevel inheritance"
  }
 },
 {
  "type": "test",
  "taskId": "test-3218412596",
  "source": {
   "name": "inheritance coding exercise 5",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/inheritance/Exercise5Tester.java\",\"className\":\"Exercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/inheritance/exercise5\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass CardHolder extends Person {\n  private int accountNumber;\n  private double balance;\n  private int creditLimit;\n  \n  public CardHolder(String n, String a, int an) {\n    super(n, a);\n    accountNumber = an;\n    balance = 0;\n    creditLimit = 5000;\n  }\n  \n  public int getAccountNumber() {\n    return accountNumber;\n  }\n  \n  public void setAccountNumber(int newAccountNumber) {\n    accountNumber = newAccountNumber;\n  }\n  \n  public double getBalance() {\n    return balance;\n  }\n  \n  public void setBalance(double newBalance) {\n    balance = newBalance;\n  }\n  \n  public int getCreditLimit() {\n    return creditLimit;\n  }\n  \n  public void setCreditLimit(int newCreditLimit) {\n    creditLimit = newCreditLimit;\n  }\n  \n  public void processSale(double price) {\n    balance += price;\n  }\n  \n  public void makePayment(double amount) {\n    balance -= amount;\n  }\n}\n\nclass PlatinumClient extends CardHolder {\n  private double cashBack;\n  private double rewards;\n  \n  public PlatinumClient(String n, String a, int an) {\n    super(n, a, an);\n    cashBack = 0.02;\n    rewards = 0;\n  }\n  \n  public double getCashBack() {\n    return cashBack;\n  }\n  \n  public void setCashBack(double newCashBack) {\n    cashBack = newCashBack;\n  }\n  \n  public double getRewards() {\n    return rewards;\n  }\n  \n  public void setRewards(double newRewards) {\n    rewards = newRewards;\n  }\n  \n  public void processSale(double price) {\n    rewards += cashBack * price;\n    setBalance(getBalance() + price);\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise5 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n  \n    PlatinumClient p = new PlatinumClient(\"Sarah\", \"101 Main Street\", 123364);\n    p.processSale(100);\n    System.out.println(p.getRewards());\n    System.out.println(p.getBalance());\n    p.makePayment(50);\n    System.out.println(p.getBalance());\n    System.out.println(p.info());\n  \n    //add code above this line   \n  }\n}\n```\n\n### For the `CardHolder` Class\n* Extend the `Person` class.\n* Add the attributes `accountNumber`, `balance`, and `creditLimit`.\n* The constructor should take arguments for `name`, `address`, and `accountNumber`. Call the constructor from the superclass with the `super` keyword and the values for `name` and `address`. The values for `balance` and `creditLimit` should be set to `0` and `5000` respectively.\n* Create getters and setters for `accountNumber`, `balance`, and `creditLimit`.\n* The method `processSale` takes a double and adds this to `balance`.\n* The method `makePayment` takes a double and subtracts it from `balance`.\n\n### For the `PlatinumClient` Class\n* Extend the `CardHolder` class.\n* Add the attributes `cashBack` and `rewards`.\n* The constructor takes values for `name`, `address`, and `accountNumber`. Pass these three values to the constructor of the superclass with the `super` keyword. Manually set `rewards` to `0` and `cashBack` to `0.02`.\n* Create getters and setters for `cashBack` and `rewards`.\n* Override the `processSale` method so that `rewards` increases by the sale amount times `cashBack`. The `balance` attribute should also increase by the sale amount.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Multilevel Inheritance"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/exercise5/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/exercise5/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create two classes with multilevel inheritance"
  }
 },
 {
  "type": "test",
  "taskId": "test-3432435518",
  "source": {
   "name": "inheritance coding exercise 4",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/inheritance/Exercise4Tester.java\",\"className\":\"Exercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/inheritance/exercise4\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n//add class definitions below this line\n\nclass RegionalBank extends Bank {\n  public double[][] regionalAccounts;\n  \n  public RegionalBank(String n, int c, double[][] a) {\n    setName(n);\n    setCustomers(c);\n    regionalAccounts = a;\n  }\n  \n  public double[][] getRegionalAccounts() {\n    return regionalAccounts;\n  }\n  \n  public void setRegionalAccounts(double[][] newAccounts) {\n    regionalAccounts = newAccounts;\n  }\n  \n  public double regionalTotal() {\n    double total = 0;\n    for (double[] accounts : regionalAccounts) {\n      setAccounts(accounts);\n      total += branchTotal();\n    }\n    return total;\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise4 {\n  public static void main(String[] args) {\n    \n    //add code below this line\n    double[][] accounts = {{10000, 13000, 22000},\n                           {30000, 7000, 19000},\n                           {15000, 23000, 31000}};\n    RegionalBank rb = new RegionalBank(\"Main Street Bank\", 9, accounts);\n    System.out.println(rb.regionalTotal());\n  \n    //add code above this line   \n  }\n}\n```\n\n* Extend the `Bank` class.\n* The constructor should take values for `name`, `customers`, and `accounts`. Remember, the `accounts` attribute should be a 2D array of doubles.\n* Use the `setName` and `setCustomers` methods to set the values for `name` and `customers`. You can set the value of `accounts` normally.\n* Add a getter and a setter for `accounts`.\n* Create the `regionalTotal` method. This method needs to sum all of the elements in a 2D array. Create a variable that stores the sum of the accounts and set it to `0`.\n* One way to solve this problem is to use a nested loop. That solution would look something like this:\n\n```java\n  public double regionalTotal() {\n    double total = 0;\n    for (double[] accounts : regionalAccounts) {\n      for (double account : accounts) {\n        total += account;\n      }\n    }\n    return total;\n  }\n```\n* The sample solution above makes use of the `bankTotal` method in the superclass `Bank`. This method only works if the attribute `accounts` is an array of doubles. The variable `accounts` is an array of doubles. Pass it to `setAccounts` and then increment `total` with return value from `branchTotal`. \n\n```java\n  public double regionalTotal() {\n    double total = 0;\n    for (double[] accounts : regionalAccounts) {\n      setAccounts(accounts);\n      total += branchTotal();\n    }\n    return total;\n  }\n```",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Extending the superclass"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Inheritance"
     }
    ],
    "files": [
     "code/inheritance/exercise4/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/inheritance/exercise4/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT extend the parent class with a new method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1767969218",
  "source": {
   "name": "polymorphism method overriding reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhy is method overriding an example of polymorphism?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "609c6d5d-db48-dfe9-04f7-5f51f3315f4d",
     "correct": true,
     "answer": "Method overriding has a single interface (the method name) and works with different forms (the superclass and subclass)."
    },
    {
     "_id": "584eae69-02eb-6fe5-b65b-6b7b68db3e07",
     "correct": false,
     "answer": "Method overriding has a single interface (the method name), but only works with a single data type (the subclass)."
    },
    {
     "_id": "ee04d9eb-0cff-ca15-fbe4-a5b612102c70",
     "correct": false,
     "answer": "Method overriding is not an example of polymorphism, it is an example of inheritance."
    }
   ],
   "guidance": "Polymorphism occurs when there is a single interface that works with multiple forms. When overriding a method, two methods have the same name (a shared interface) and they work with different forms (the superclass and the subclass). This is why method overriding is an example of polymorphism.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Method Overriding"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/MethodOverriding.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/MethodOverriding.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT explain why method overriding is an example of polymorphism"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-994634395",
  "source": {
   "name": "polymorphism method overloading reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass ExampleClass {\n  public int totalChars(String s1, String s2, String s3) {\n    return s1.length() + s2.length() + s3.length();\n  }\n  \n  public int totalChars(String s1) {\n    return s1.length();\n  }\n}\n\npublic class Main {  \n  public static void main(String[] args) {\n    ExampleClass e = new ExampleClass();\n    System.out.println(e.totalChars(\"hello\", \"world\"));\n  }\n}\n```\n\nWhat is the output of the program?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "4c426c44-9584-cbc5-dfe7-71f8afa67172",
     "correct": true,
     "answer": "Error message"
    },
    {
     "_id": "37643034-8451-db6b-2a9d-7d61a57ec4a6",
     "correct": false,
     "answer": "`hello world`"
    },
    {
     "_id": "0eb099ec-85f2-2705-bc06-c1dd8e52ca9a",
     "correct": false,
     "answer": "`10`"
    }
   ],
   "guidance": "This code would generate an error message. The method `totalChars` is overloaded, but it does not have a version that takes two string arguments. The method call must match one of the overloaded method definitions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Method Overloading"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/MethodOverloading.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/MethodOverloading.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT properly call an overloaded method"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1047831703",
  "source": {
   "name": "abstract methods reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nabstract class ParentClass {\n  public abstract void sayHello();\n}\n```\n\nDrag the code blocks into the box below. Create the class `ChildClass` that inherits from `ParentClass`. **Hint**, not all of the blocks will be used, and the blocks must be properly indented.",
   "initial": "class ChildClass extends ParentClass {\n  public void sayHello() {\n    System.out.println(&quot;Hello&quot;);\n  }\n}\nconcrete class ChildClass extends ParentClass {  #distractor\nclass ChildClass { #distractor\npublic void hello() {  #distractor\npublic abstract void sayHello() { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Here is the solution:\n\n```java\nclass ChildClass extends ParentClass {\n  public void sayHello() {\n    System.out.println(\"Hello\");\n  }\n}\n```\n\n* `ChildClass` is a concrete class (not abstract), but you do not use a keyword to indicate this.\n* `ChildClass` must inherit from `ParentClass`, so you need to use the `extends` keyword.\n* `SayHello` is an abstract method, which means the subclass must override it.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Abstract Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/AbstractMethods.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/AbstractMethods.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT create a subclass from an abstract class"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4189147635",
  "source": {
   "name": "polymorphism formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nMark all of the ways in which polymorphism can be implemented. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "67fce068-b5a0-ab64-e18e-09028dcd2073",
     "correct": true,
     "answer": "Method overriding"
    },
    {
     "_id": "ffea1301-b39a-804a-92f2-41e28fcd5a63",
     "correct": true,
     "answer": "Method overloading"
    },
    {
     "_id": "fc625311-587f-2fd3-feda-4a329517906c",
     "correct": true,
     "answer": "Abstract methods"
    },
    {
     "_id": "3310c9c9-1a04-7526-98fe-e32b02e5f886",
     "correct": false,
     "answer": "Inheritance"
    },
    {
     "_id": "a81fba5b-0ad1-fbe5-c1cb-bf24d408687d",
     "correct": false,
     "answer": "Encapsulation"
    }
   ],
   "guidance": "The correct answers are:\n\n```markdown\nAbstract methods\nMethod overloading\nMethod overriding\n```\n\nInheritance by itself is not a form of polymorphism. If inheritance uses method overriding, then that would be a form of polymorphism. However, you can have inheritance without method overriding, therefore inheritance is considered a form of polymorphism.\n\nEncapsulation is about hiding and sharing information in objects. This is not a form of polymorphism.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Examples of polymorphism"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify the different forms of polymorphism in Java"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1123100308",
  "source": {
   "name": "polymorphism formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following code:\n\n```java\nclass Rectangle {\n  private double length;\n  private double width;\n\n  public Rectangle(double l, double w) {\n    length = l;\n    width = w;\n  }\n\n  public double area() {\n    return length * width;\n  }\n}\n\npublic class Square extends Rectangle {\n  private double side;\n\n  public Square(double s) {\n    side = s;\n  }\n\n  public double area() {\n    return side * side;\n  }\n}\n```\n\nWhich example of polymorphism is present in the code above?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "26e0a7da-65b2-fa51-5b14-a3664f631aec",
     "correct": true,
     "answer": "Method Overriding - The subclass `Circle` creates the method `area` replaces the `area` method from the superclass."
    },
    {
     "_id": "ade15562-68d4-4b76-366f-28c51261cd0d",
     "correct": false,
     "answer": "Method Overloading - There is more than one instance of the method `area` that have different definitions (number of parameters)."
    },
    {
     "_id": "4cd87135-d69f-70d2-215d-6b3774bc4d50",
     "correct": false,
     "answer": "Abstract Method - `Circle` extends the abstract class `Rectangle` and must define the abstract method `area`."
    }
   ],
   "guidance": "The correct answer is **method overriding**.\n\n* This is not method overloading because you would need the more than one method in the same class. There are two versions of `area`, but one is in the superclass and the other is in the subclass. In addition, these methods have the same definition (neither one takes a parameter).\n* This is not abstract methods because `Rectangle` is not an abstract class, and the method `area` is not an abstract method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Method Overriding"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify method overriding"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-29167309",
  "source": {
   "name": "polymorphism lab question 1",
   "showName": false,
   "instructions": "## Lab Question\n\nUse the method definitions below to help you answer the question.\n\n```java\npublic myMethod(int a) {\n  // rest of the method goes here\n}\n\npublic myMethod(int a, int b) {\n  // rest of the method goes here\n}\n```\n\nThe code sample above is representative of which form of polymorphism?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "b985c185-a332-49c6-8482-54f663623ffd",
     "correct": true,
     "answer": "Method overloading"
    },
    {
     "_id": "0a880a6a-bf3f-2355-4c7e-9abca523a73a",
     "correct": false,
     "answer": "Method overriding"
    },
    {
     "_id": "2c3265b7-02ad-2cab-e20d-bfbb97b89929",
     "correct": false,
     "answer": "Abstract methods"
    }
   ],
   "guidance": "The correct answer is `Method overloading`. Neither method uses the keyword `abstract` so these are not abstract methods. These methods do not appear in a superclass and a subclass so this is not method overriding. This is method overloading because we have methods with the same name but different parameters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Method Overloading"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/Lab1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/Lab1.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": "clear"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify method overloading"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3330823136",
  "source": {
   "name": "polymorphism lab question 2",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "abstract class ClassA {\n  <<<public abstract>>> void greeting();\n}\n\nclass ClassB extends <<<ClassA>>> {\n  <<<public void>>> greeting() {\n    System.out.println(\"Hello\");\n  }\n}",
   "distractors": "ClassC\nabstract",
   "guidance": "The correct answer is:\n\n```java\nabstract class ClassA {\n  public abstract void greeting();\n}\n\nclass ClassB extends ClassA {\n  public void greeting() {\n    System.out.println(\"Hello\");\n  }\n}\n```\n\n* Since the `greeting` method in `ClassA` is not defined, it must be an `abstract` method.\n* There is no `ClassC` defined so `ClassB` must extend `ClassA`.\n* Since `ClassB` extends `ClassA`, it must override the `greeting` method. However, this is not an abstract method; it is a concrete method. So the `abstract` keyword is not used.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Abstract Classes and Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/Lab2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/Lab2.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": "clear"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create an abstract class with an abstract method and a subclass for the abstract class",
   "tokens": {
    "blank": [
     "public abstract",
     "ClassA",
     "public void"
    ],
    "text": [
     "abstract class ClassA {\n  ",
     0,
     " void greeting();\n}\n\nclass ClassB extends ",
     0,
     " {\n  ",
     0,
     " greeting() {\n    System.out.println(\"Hello\");\n  }\n}"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-195896886",
  "source": {
   "name": "polymorphism lab question 3",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blanks below with the appropriate definition for each term.",
   "showValues": true,
   "text": "When a subclass has a method with the same name as the superclass, but the subclass performs a different task - <<<Method Overriding>>>\nWhen a method performs different tasks depending on its parameters - <<<Method Overloading>>>\nWhen a method **must** be overriden in the sublcass - <<<Abstract Method>>>",
   "distractors": "",
   "guidance": "**Method Overriding** - When a subclass has a method with the same name as the superclass, but the subclass performs a different task.\n**Method Overloading** - When a method performs different tasks depending on its parameters.\n**Abstract Method** - When a method must be overriden in the subclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Expressing Polymorphism"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/Lab3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/Lab3.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": "clear"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define different ways of incorporating polymorphism",
   "tokens": {
    "blank": [
     "Method Overriding",
     "Method Overloading",
     "Abstract Method"
    ],
    "text": [
     "When a subclass has a method with the same name as the superclass, but the subclass performs a different task - ",
     0,
     "\nWhen a method performs different tasks depending on its parameters - ",
     0,
     "\nWhen a method **must** be overriden in the sublcass - ",
     0
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2280652319",
  "source": {
   "name": "polymorphism lab question 4",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the following code:\n\n```java\nclass ExampleClass {\n  public void greeting(String s) {\n    System.out.println(\"Hello \" + s + \"!\");\n  }\n\n  public void greeting(String s1, String s2) {\n    System.out.println(\"Hello \" + s1 + \" and \" + s2 + \"!\");\n  }\n}\n```\n\nWhat does the code sample best represent?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "1c3e259d-1dd6-bcad-c09a-d9aa78a2cd87",
     "correct": true,
     "answer": "Method overloading"
    },
    {
     "_id": "4a1133b5-fae6-3c98-9b0d-204f66ba91e7",
     "correct": false,
     "answer": "Method overriding"
    },
    {
     "_id": "0dae7562-5d3f-e066-328c-afbe4c42b0f5",
     "correct": false,
     "answer": "Abstract method"
    }
   ],
   "guidance": "The correct answer is method overloading because you have more than one method in the same class with the same name but different sets of parameters. In addition, there is no inheritance. A subclass needs to inherit from a superclass before it can override a method. Similarly, you must inherit from an abstract class before implementing an abstract method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Method overloading"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/Lab4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/Lab4.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": "clear"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify method overloading"
  }
 },
 {
  "type": "test",
  "taskId": "test-3816089180",
  "source": {
   "name": "polymorphism lab challenge",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/polymorphism/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/polymorphism/labChallenge\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nclass Chef {\n  private String name;\n  private String cuisine;\n  private int michelinStars;\n  \n  //add constructors below this line\n\n  public Chef(String n) {\n    name = n;\n  }\n  \n  public Chef(String n, String c) {\n    name = n;\n    cuisine = c;\n  }\n  \n  public Chef(String n, String c, int s) {\n    name = n;\n    cuisine = c;\n    michelinStars = s;\n  }\n\n  //add constructors above this line\n  \n  public String display() {\n    String msg = String.format(\"%s is known for %s cuisine and has %d Michelin stars.\", name, cuisine, michelinStars);\n    return msg;\n  }\n}\n\n//add class definitions above this line\n\npublic class LabChallenge {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Chef c1 = new Chef(\"Marco Pierre White\");\n    Chef c2 = new Chef(\"Rene Redzepi\", \"Nordic\");\n    Chef c3 = new Chef(\"Thomas Keller\", \"French\", 3);\n    \n    System.out.println(c1.display());\n    System.out.println(c2.display());\n    System.out.println(c3.display());\n    \n    //add code above this line\n  }\n}\n```\n\n* One constructor needs to take a single string argument that will be assigned to the `name` attribute. Java will automatically set the attributes `cuisine` and `michelinStars` to `null` and `0` respectively.\n* One constructor needs to take two string arguments. One will be assigned to the `name` attribute, and the other will be assigned to the `cuisine` attribute. Java will automatically set the attribute `michelinStars` to `0`.\n* One constructor takes three parameters. The first one is assigned to `name`, the second to `cuisine`, and the third is assigned to the `michelinStars` attribute.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Method Overloading"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/labChallenge/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/labChallenge/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT overload the constructor"
  }
 },
 {
  "type": "test",
  "taskId": "test-1690807397",
  "source": {
   "name": "polymorphism coding exercise 1",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/polymorphism/Exercise1Tester.java\",\"className\":\"Exercise1Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/polymorphism/exercise1\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Random; \n\nclass Lottery {\n  public ArrayList<Integer> shuffle() {\n    Random r = new Random();\n    ArrayList<Integer> nums = new ArrayList<Integer>();\n    for (int i = 0; i < 5; i++) {\n      int num = r.nextInt(20);\n      nums.add(num);\n    }\n    return nums;\n  }\n}\n\n//add class definitions below this line\n\nclass PowerBall extends Lottery {\n  public ArrayList<Integer> shuffle() {\n    Random r = new Random();\n    ArrayList<Integer> nums = new ArrayList<Integer>();\n    for (int i = 0; i < 6; i++) {\n      int num = r.nextInt(100);\n      nums.add(num);\n    }\n    return nums;\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise1 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    PowerBall p = new PowerBall();\n    System.out.println(p.shuffle());\n    \n    //add code above this line\n  }\n}\n```\n\n* Be sure that `PowerBall` extends the `Lottery` class.\n* Override the `shuffle` method.\n* In the for loop, change the `5` to a `6` so that it returns six random integers.\n* The `nextInt` method takes one argument. It will return a random integer up to but not including the argument. Since you want to return a random number up to 99, use `nextInt(100)`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Method Overriding"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/exercise1/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/exercise1/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT override a method from a superclass"
  }
 },
 {
  "type": "test",
  "taskId": "test-2292953144",
  "source": {
   "name": "polymorphism coding exercise 4",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/polymorphism/Exercise4Tester.java\",\"className\":\"Exercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/polymorphism/exercise4\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nimport java.util.Arrays;\n\n//add class definitions below this line\n\nclass Median {\n  public double calculateMedian(int n1, int n2) {\n    return (double) (n1 + n2) / 2;\n  }\n  \n  public double calculateMedian(int n1, int n2, int n3) {\n    int[] nums = {n1, n2, n3};\n    Arrays.sort(nums);\n    return (double) nums[1];\n  }\n  \n  public double calculateMedian(int n1, int n2, int n3, int n4) {\n    int[] nums = {n1, n2, n3, n4};\n    Arrays.sort(nums);\n    return (double) (nums[1] + nums[2]) / 2;\n  }\n  \n  public double calculateMedian(int n1, int n2, int n3, int n4, int n5) {\n    int[] nums = {n1, n2, n3, n4, n5};\n    Arrays.sort(nums);\n    return (double) nums[2];\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise4 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Median m = new Median();\n    System.out.println(m.calculateMedian(3, 5, 1, 4, 2));\n    System.out.println(m.calculateMedian(8, 6, 4, 2));\n    System.out.println(m.calculateMedian(9, 3, 7));\n    System.out.println(m.calculateMedian(5, 2));\n    \n    //add code above this line\n  }\n}\n```\n\nThere are two scenarios for calculating the median value: an odd number integers and an even number of integers.\n* Odd Number - When there are an odd number of arguments, take the arguments and load them into an array. Sort the array with `Arrays.sort`. Then return the element in the middle of the array. When there are 3 arguments that would be the element at index `1`. When there are 5 arguments the middle element would be the element at index `2`. Be sure to type cast the return values as a double.\n* Even Number - When there are two arguments return the average of these two values. When there are 4 arguments, load them into an array and sort it with `Arrays.sort`. Return the average of elements at indices `1` and `2`. Be sure to type cast the return values as a double.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Method Overloading"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/exercise4/Exercise4.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/exercise4/Exercise4.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT overload a method with four different type signatures"
  }
 },
 {
  "type": "test",
  "taskId": "test-1537667893",
  "source": {
   "name": "polymorphism coding exercise 5",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/polymorphism/Exercise5Tester.java\",\"className\":\"Exercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/polymorphism/exercise5\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nimport java.util.ArrayList;\nimport java.io.*;\n\nclass Substitute {\n  private String sourceFile;\n  private String answerFile;\n  private ArrayList<String[]> wordsList;\n  private String wordsString;\n  \n  public Substitute(String source, String answer) {\n    sourceFile = source;\n    answerFile = answer;\n    wordsList = new ArrayList<String[]>();\n    wordsString = null;\n  }\n  \n  public ArrayList<String[]> getWordsList() {\n    return wordsList;\n  }\n  \n  public String getWordsString() {\n    return wordsString;\n  }\n  \n  public String getAnswerFile() {\n    return answerFile;\n  }\n  \n  /**\n   * Reads the text file stored in sourceFile and converts it to an\n   * ArrayList of arrays of strings. Each array represents a sentence,\n   * and element represents a word of the sentence. This ArrayList of\n   * arrays of strings is stored in the attribute wordsList.\n   */\n  public void stringToList() {\n    try {\n      ArrayList<String> lines = new ArrayList<String>();\n      BufferedReader reader = new BufferedReader(new FileReader(sourceFile));\n      String currentLine = reader.readLine();\n      while(currentLine != null) {\n        lines.add(currentLine);\n        currentLine = reader.readLine();\n      }\n      reader.close();\n      for (String line : lines) {\n        wordsList.add(line.split(\" \"));\n      }\n    } catch (IOException e) {\n      System.out.println(e);\n    }\n  }\n  \n  /**\n   * Takes the ArrayList of arrays of strings and coverts it back into\n   * a single string with newline characters. This string is stored\n   * in the wordsString attribute.\n   */\n  public void listToString() {\n    ArrayList<String> lines = new ArrayList<String>();\n    for (String[] line : wordsList) {\n      lines.add(String.join(\" \", line));\n    }\n    wordsString = String.join(\"\\n\", lines);\n  }\n  \n  /**\n   * Calls stringToList. Then iterates through the ArrayList of arrays of\n   * strings. If it is the fifth word, the element is replaces with\n   * \"HELLO\". This method calls listToString and prints the results.\n   */\n  public void swapWords() {\n    stringToList();\n    for (String[] line : wordsList) {\n      for (int i = 0; i < line.length; i++) {\n        if ((i + 1) % 5 == 0) {\n          line[i] = \"HELLO\";\n        }\n      }\n    }\n    listToString();\n    System.out.println(wordsString);\n  }\n}\n\n//add class definitions below this line\n\nclass Stars extends Substitute {\n  public Stars(String source, String answer) {\n    super(source, answer);\n  }\n  \n  private String createStars(String s) {\n    String stars = \"\";\n    for (int i = 0; i < s.length(); i++) {\n      stars += \"*\";\n    }\n    return stars;\n  }\n  \n  public void swapWords() {\n    stringToList();\n    for (String[] line : getWordsList()) {\n      for (int i = 0; i < line.length; i++) {\n        if ((i + 1) % 3 == 0) {\n          line[i] = createStars(line[i]);\n        }\n      }\n    }\n    listToString();\n    try {\n      BufferedWriter writer = new BufferedWriter(new FileWriter(getAnswerFile()));\n      writer.write(getWordsString());\n      writer.close();\n    } catch (IOException e) {\n      System.out.println(e);\n    } \n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise5 {  \n  public static void main(String[] args) {\n    String source = \"/home/codio/workspace/code/polymorphism/exercise5/words.txt\";\n    String answer = \"/home/codio/workspace/code/polymorphism/exercise5/answer.txt\";\n    \n    //add code below this line\n\n    Stars s = new Stars(source, answer);\n    s.swapWords();\n    \n    //add code above this line\n  }\n}\n```\n\n* The `swapWords` method needs to call the constructor of the superclass. Use the `super` keyword and pass it the required parameters.\n```java\n  public Stars(String source, String answer) {\n    super(source, answer);\n  }\n```\n* The `swapWords` method is almost the same as in the `Substitute` class except that you are going to change every third word. Use `% 3` instead of `% 5`. In addition, you do not want to replace the word with `HELLO` but a number of `*`. This example calls a helper method that will return the correct number of `*`.\n```java\n        if ((i + 1) % 3 == 0) {\n          line[i] = createStars(line[i]);\n        }\n```\n* This helper method takes the word to be replaced as an argument. Create an empty string that will contain the asterisks. Iterate a for loop as many times as the length of the word to be replaced. Add an asterisk to the string variable every time the loop runs. Finally, return the string variable with the asterisks. \n```java\n  private String createStars(String s) {\n    String stars = \"\";\n    for (int i = 0; i < s.length(); i++) {\n      stars += \"*\";\n    }\n    return stars;\n  }\n```",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Method Overriding"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/exercise5/Exercise5.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/exercise5/Exercise5.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT override a method that works with files."
  }
 },
 {
  "type": "test",
  "taskId": "test-2016365405",
  "source": {
   "name": "polymorphism coding exercise 2",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/polymorphism/Exercise2Tester.java\",\"className\":\"Exercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/polymorphism/exercise2\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nabstract class Vehicle {\n  public abstract double travel(double time);\n}\n\n//add class definitions below this line\n\nclass Airplane extends Vehicle {\n  private double speed;\n  \n  public Airplane(double s) {\n    speed = s;\n  }\n  \n  public double travel(double time) {\n    return speed * time;\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise2 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Airplane a = new Airplane(550.0);\n    System.out.println(a.travel(2));\n    System.out.println(a.travel(3.15));\n    System.out.println(a.travel(10.63));\n    \n    //add code above this line\n  }\n}\n```\n\n* Have `Airplane` extend the `Vehicle` class.\n* Since `distance` is an abstract method, the `Airplane` class must override this method.\n* The code sample that initiates an `Airplane` object shows that this class takes a value for the constructor.\n* Calculating distance is done by multiplying speed of the vehicle by time it is traveling. The `distance` method takes time as an argument, so the value representing speed is contained within the object (the value passed to the constructor).\n* The constructor for the `Airplane` class takes a double which represents speed.\n* The `distance` method returns `time` multiplied by the valued passed to the constructor.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Abstract Classes and Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/exercise2/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/exercise2/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT inherit from an abstract class"
  }
 },
 {
  "type": "test",
  "taskId": "test-1241253698",
  "source": {
   "name": "polymorphism coding exercise 3",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/polymorphism/Exercise3Tester.java\",\"className\":\"Exercise3Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/polymorphism/exercise3\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nabstract class Temperature {\n  public abstract double celsius(double temp);\n  public abstract double fahrenheit(double temp);\n}\n\n//add class definitions below this line\n\nclass Conversion extends Temperature {\n  public double celsius(double temp) {\n    return (temp - 32) / 1.8;\n  }\n  \n  public double fahrenheit(double temp) {\n    return temp * 1.8 + 32;\n  }\n  \n  public double convertTo(String unit, double temp) {\n    if (unit.toLowerCase().equals(\"celsius\")) {\n      return celsius(temp);\n    } else if (unit.toLowerCase().equals(\"fahrenheit\")) {\n      return fahrenheit(temp);\n    }\n    \n    return 0;\n  }\n}\n\n//add class definitions above this line\n\npublic class Exercise3 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Conversion c = new Conversion();\n    System.out.println(c.convertTo(\"Celsius\", 212.0));\n    System.out.println(c.convertTo(\"CELSIUS\", 78.0));\n    System.out.println(c.convertTo(\"celsius\", 23.0));\n    System.out.println(c.convertTo(\"Fahrenheit\", 0.0));\n    System.out.println(c.convertTo(\"FAHRENHEIT\", 29.0));\n    System.out.println(c.convertTo(\"fahrenheit\", 112.0));\n    \n    //add code above this line\n  }\n}\n```\n* Make sure that `Conversion` extends the `Temperature` class.\n* Becuase `Temperature` is an abstract class, the `Conversion` class must override the `celsius` and `fahrenheit` methods.\n* The `celsius` method has the argument `temp` and returns `(temp - 32) / 1.8`.\n* The `fahrenheit` method has the argument `temp` and returns `temp * 1.8 + 32`.\n* The `convertTo` method takes a string (`unit`) and a double (`temp`) as arguments. Convert the `unit` to lowercase and ask if it equals `\"celsius\"`. If yes, return the output of `celsius(temp)`. If `unit` is equal to `\"fahrenheit\"`, return the output of `fahrenheit(temp)`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Abstract Methods"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Polymorphism"
     }
    ],
    "files": [
     "code/polymorphism/exercise3/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/polymorphism/exercise3/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT override abstract methods inherited from an abstract class"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1696965695",
  "source": {
   "name": "importing user-defined classes reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nHow do you use a user-defined class that is in a separate file in your Java program?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "423a2abc-57f3-dc52-c35f-07f9ec77f2bc",
     "correct": true,
     "answer": "Compile both of the Java files. These files must be in the same folder."
    },
    {
     "_id": "17956297-89c1-1c3a-1b6f-9f8e75f0c66f",
     "correct": false,
     "answer": "Use the `import` keyword."
    },
    {
     "_id": "c73278e5-616e-1a8a-a568-02cd6399e25f",
     "correct": false,
     "answer": "Use `from fileName import ClassName`."
    },
    {
     "_id": "081c810f-b3a9-0751-1127-8bd4ed540f74",
     "correct": false,
     "answer": "Compile both of the Java files. These files can be in separate folders."
    }
   ],
   "guidance": "In order to use a user-defined class in a separate file, you need to compile both the user-defined class and the main Java program. These files **must** be in the same folder.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Importing User-Defined Classes"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/ImportingClasses.java",
     "code/advanced/ClassDefinition.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/ImportingClasses.java"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/ClassDefinition.java"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": "clear"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT explain how to use user-defined classes in a separate file"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3265767851",
  "source": {
   "name": "list of objects reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the existence of the class `MyClass`. Drag the appropriate blocks into the box below so you create an ArrayList of ten objects of type `MyClass`. **Hint**, not all of the blocks will be used.",
   "initial": "ArrayList&lt;MyClass&gt; myArrayList = new ArrayList&lt;MyClass&gt;();\nfor (int i = 0; i &lt; 10; i++) {\n  myArrayList.add(new MyClass());\n}\nArrayList&lt;int&gt; myArrayList = new ArrayList&lt;int&gt;(); #distractor\nmyArrayList.add(MyClass); #distractor\nfor (int i = 0; i &lt; 11; i++) { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Here is the solution:\n\n```java\nArrayList<MyClass> myArrayList = new ArrayList<MyClass>();\nfor (int i = 0; i < 10; i++) {\n  myArrayList.add(new MyClass());\n}\n```\n\n* The objects need to be stored in an ArrayList, and ArrayLists need to have the same type as the elements. The ArrayList should have the type `MyClass`.\n* You need ten objects, so the loop must run ten times.\n* Add an element to the ArrayList that is a `MyClass` object. Be sure to use the `new` keyword to instantiate a new `MyClass` object.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "List of Objects"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/ListOfObjects.java",
     "code/advanced/App.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/ListOfObjects.java"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/App.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create an ArrayList of user-defined objects"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2967844050",
  "source": {
   "name": "composition reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below with the words from the dropdown menu.",
   "showValues": true,
   "text": "<<<Inheritance>>> should be used to add functionality if there is a \"is a\" relationship.\n<<<Composition>>> should be used to add functionality if there is a \"has a\" relationship.",
   "distractors": "Polymorphism\nEncapsulation",
   "guidance": "Use inheritance when you have a \"is a\" relationship; e.g. a car is a vehicle.\nUse composition when you have a \"has a\" relationship; e.g. a car has an engine.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Object Composition"
     },
     {
      "name": "Programming Language",
      "value": "C++, Python, Java, JavaScript"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/Composition.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/Composition.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT identify when to use composition and when to use inheritance",
   "tokens": {
    "blank": [
     "Inheritance",
     "Composition"
    ],
    "text": [
     0,
     " should be used to add functionality if there is a \"is a\" relationship.\n",
     0,
     " should be used to add functionality if there is a \"has a\" relationship."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3537822719",
  "source": {
   "name": "string representation reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nAssume the following code:\n\n```java\nclass ExampleClass {\n  private String attribute;\n\n  public ExampleClass(String a) {\n    attribute = a;\n  }\n}\n```\n\nWhich method would be the **best** way to represent this class as a string?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "cb8db73f-d00a-aa4e-b049-cf8077ecfe9d",
     "correct": true,
     "answer": "```java\npublic String toString() {\n  return getClass().getName() + \"[attribute= \" + attribute + \"]\";\n}\n```"
    },
    {
     "_id": "4823ccc6-17a1-6e1a-cada-1824f1755e24",
     "correct": false,
     "answer": "```java\npublic String string() {\n  return getClass().getName() + \"[attribute= \" + attribute + \"]\";\n}\n```"
    },
    {
     "_id": "7c6713b5-432d-6cba-0710-7ce8de505a28",
     "correct": false,
     "answer": "```java\npublic String toString() {\n  return getName() + \"[attribute= \" + attribute + \"]\";\n}\n```"
    },
    {
     "_id": "fc2a0991-dee0-0da6-a4a0-bd09db5e0fbd",
     "correct": false,
     "answer": "```java\npublic String toString() {\n  return getClass().getName();\n}\n```"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\npublic String toString() {\n  return getClass().getName() + \"[attribute= \" + attribute + \"]\";\n}\n```\n\n* The method to create a string representation is `toString`.\n* You must first get the class before getting the name — `getClass().getName()`.\n* A good string representation will tell you the class name as well as the values for each attribute.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "String Representation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/StringRepresentation.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/StringRepresentation.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT override the toString method to create a string representation of the object"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2980100207",
  "source": {
   "name": "interfaces reading question",
   "showName": false,
   "instructions": "## Reading Question\n\n`MyInterface` is an interface and the `ExampleClass` uses this interface. Fill in the blanks accordingly.",
   "showValues": true,
   "text": "```\n<<<interface>>> MyInterface {\n  <<<String>>> greeting();\n}\n\nclass ExampleClass <<<implements>>> MyInterface {\n  <<<public String>>> greeting() {\n    return \"Hello\";\n  }\n}\n```",
   "distractors": "interface class\nextends\nvoid\npublic void",
   "guidance": "Here is the solution:\n\n```java\ninterface MyInterface {\n  String greeting();\n}\n\nclass ExampleClass implements MyInterface {\n  public String greeting() {\n    return \"Hello\";\n  }\n}\n```\n\n* The keyword for an interface is `interface`; the keyword `class` is not used.\n* Using an interface requires the keyword `implements`, not `extends`.\n* Methods in an interface are public by default so you do not need the `public` keyword.\n* In `ExampleClass` the `greeting` method returns a string. That means the method in the interface should use `String` and the method in the class should use `public String`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Interfaces"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/Interfaces.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/Interfaces.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT create and implement an interface",
   "tokens": {
    "blank": [
     "interface",
     "String",
     "implements",
     "public String"
    ],
    "text": [
     "```\n",
     0,
     " MyInterface {\n  ",
     0,
     " greeting();\n}\n\nclass ExampleClass ",
     0,
     " MyInterface {\n  ",
     0,
     " greeting() {\n    return \"Hello\";\n  }\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1727359970",
  "source": {
   "name": "object equality reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "showValues": true,
   "text": "Use <<<equals>>> to compare attribute values between two objects.\nUse <<<==>>> to compare memory addresses between two objects.",
   "distractors": "=\nequalTo",
   "guidance": "Use **equals** to compare attribute values between two objects.\nUse **==** to compare memory addresses between two objects.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Object Equality"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/ObjectEquality.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/ObjectEquality.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT differentiate between == and equals when comparing two objects",
   "tokens": {
    "blank": [
     "equals",
     "=="
    ],
    "text": [
     "Use ",
     0,
     " to compare attribute values between two objects.\nUse ",
     0,
     " to compare memory addresses between two objects."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3877358862",
  "source": {
   "name": "advanced topics formative assessment 1",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume that the ArrayList `myList` is of type `myObject`. Choose the code below that would call the `go` method on the fourth element in the ArrayList.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "9de00e3d-1ca0-1c78-54d7-ba7234fcf272",
     "correct": true,
     "answer": "`myList.get(3).go();`"
    },
    {
     "_id": "5cd7d860-dc7a-c6f6-c509-e3e1537924e1",
     "correct": false,
     "answer": "`myList[3].go();`"
    },
    {
     "_id": "12edd30f-6bbc-4115-9772-cfd636cdf51e",
     "correct": false,
     "answer": "`myList.go();`"
    },
    {
     "_id": "c43ecf6a-1643-6491-614b-0ead3cd36717",
     "correct": false,
     "answer": "`myList.get(4).go();`"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\nmyList.get(3).go();\n```\n\nArrayLists use the `get` method as opposed to square brackets to reference an element. ArrayLists start counting elements with 0, so the fourth element would be `3`. Once you have referenced the correct element with `myList.get(3)` then add `.go()` to call the `go` method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "ArrayList of Objects"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT call a method on an object in an ArrayList"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-806737169",
  "source": {
   "name": "advanced topics formative assessment 2",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume the following class definitions:\n\n```java\nclass VideoGame {\n  private Player player;\n  private int level;\n  private int score;\n\n  public VideoGame(Player p) {\n    player = p;\n    level = 1;\n    score = 0;\n  }\n}\n\nclass Player {\n  private int health;\n  private String weapon;\n\n  public Player() {\n    health = 100;\n    weapon = \"small sword\";\n  }\n}\n```\n\nWhy does the following code generate an error message?\n\n```java\nVideoGame myGame = VideoGame(player);\n```",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "87c16de0-f9d9-c907-8271-40ea1ea65d9c",
     "correct": true,
     "answer": "There needs to be an instance of the `Player` class defined as: \n```java\nPlayer player = new Player();\n```"
    },
    {
     "_id": "83c2c8f3-8842-e8a8-6b22-4a543d1bc3d9",
     "correct": false,
     "answer": "You need to replace\n```java\nVideoGame myGame = new VideoGame(player);\n```\nwith \n```java\nPlayer player = new Player();\n```"
    },
    {
     "_id": "3a945dd5-d3e6-d25b-554e-c9b7ef425918",
     "correct": false,
     "answer": "There needs to be an instance of the `Player` class defined as:\n```java\nPlayer myPlayer = new Player();\n```"
    }
   ],
   "guidance": "This is an example of composition. The `VideoGame` class is the composite class and the `Player` class is the component class. That means an instance of the `Player` class is used to create an instance of the `VideoGame` class. The given code defines the `Player` class, but it does not instantiate an object. You would need to instantiate the object `player`. The object `myPlayer` is not correct because that is not the name use when instantiating `myGame`.\n\n```python\nPlayer player = new Player();\nVideoGame myGame = VideoGame(player);\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Object Composition"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT troubleshoot object composition"
  }
 },
 {
  "type": "test",
  "taskId": "test-2414713005",
  "source": {
   "name": "advanced topics lab challenge",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/advanced/LabChallengeTester.java\",\"className\":\"LabChallengeTester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/advanced/labChallenge\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nclass BankAccount {\n  private double checking;\n  private double savings;\n  \n  public BankAccount(double c, double s) {\n    checking = c;\n    savings = s;\n  }\n  \n  //add toString definition below this line\n  \n  public String toString() {\n    return getClass().getName() + String.format(\"[checking=\" + checking + \", savings=\" + savings + \"]\", checking, savings);\n  }\n  \n  //add toString definition above this line\n  \n}\n\npublic class LabChallenge {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    BankAccount account1 = new BankAccount(2432, 89.52);\n    BankAccount account2 = new BankAccount(1998, 239.43);\n    System.out.println(account1);\n    System.out.println(account2);\n\n    //add code above this line\n    \n  }\n}\n```\n\n* Create the `toString` method, which should return a string.\n* Use `getClass().getName()` to get the object type.\n* Concatenate a string that contains the name and value for each attribute.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "String Representation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/labChallenge/LabChallenge.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/labChallenge/LabChallenge.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT override the toString method to create a string representation of an object"
  }
 },
 {
  "type": "test",
  "taskId": "test-326602571",
  "source": {
   "name": "advanced topics coding exercise 2",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/advanced/Exercise2Tester.java\",\"className\":\"Exercise2Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/advanced/exercise2\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nimport java.util.*;\n\nclass Band {\n  private String name;\n  private String genre;\n  private String[] members;\n  \n  public Band(String n, String g, String[]m) {\n    name = n;\n    genre = g;\n    members = m;\n  }\n  \n  //add class definitions below this line\n  \n  public String toString() {\n    String nameAttribute = \"name=\" + name + \", \";\n    String genreAttribute = \"genre=\" + genre + \", \";\n    String membersAttribute = \"members=\" + Arrays.toString(members);\n    return getClass().getName() + \"[\" + nameAttribute + genreAttribute + membersAttribute + \"]\";\n  }\n\n  //add method definition above this line\n}\n\npublic class Exercise2 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n    \n    String[] members = {\"Jerry\", \"Bob\", \"Mickey\", \"Bill\", \"Phil\", \"Pigpen\"};\n    Band dead = new Band(\"The Grateful Dead\", \"rock'n roll\", members);\n    System.out.println(dead);\n\n    //add code above this line\n    \n  }\n}\n```\n\n* Previous examples of the `toString` method have a single line of code as the return statement. For legibility purposes, the string is broken up across several variables.\n* Set `nameAttribute` to `\"name=\"` followed by the attribute `name`. Don't forget the comma.\n* Set `genreAttribute` to `\"genre=\"` followed by the attribute `genre`. Don't forget the comma.\n* Set `membersAttribute` to `\"members=\"`. If you add the `members` attribute, Java will not print the elements of the array. Instead, use `Array.toString(members)`. You do not need a comma since this is the last attribute.\n* Use `getClass().getName()` to get the object type followed by a `\"[\"`, `nameAttribute`, `genreAttribute`, `membersAttribute`, and finally a `\"]\"`.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "String Representation"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/exercise2/Exercise2.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise2/Exercise2.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT represent an object as a string with the toString method"
  }
 },
 {
  "type": "test",
  "taskId": "test-3997253090",
  "source": {
   "name": "advanced topics coding exercise 3",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/advanced/Exercise3Tester.java\",\"className\":\"Exercise3Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/advanced/exercise3\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\n\n```\n\n* ",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "List of Objects"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/exercise3/Exercise3.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise3/Exercise3.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a list of objects"
  }
 },
 {
  "type": "test",
  "taskId": "test-1539171007",
  "source": {
   "name": "advanced topics coding exercise 4",
   "showName": true,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/advanced/Exercise4Tester.java\",\"className\":\"Exercise4Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/advanced/exercise4\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\nclass Book {\n  private String title;\n  private String author;\n  private String genre;\n  \n  public Book(String t, String a, String g) {\n    title = t;\n    author = a;\n    genre = g;\n  }\n  \n  public String getTitle() {\n    return title;\n  }\n  \n  public String getAuthor() {\n    return author;\n  }\n  \n  public String getGenre() {\n    return genre;\n  }\n  \n  public String toString() {\n    return getClass().getName() + \"[title=\" + title + \", author=\" + author + \", genre=\" + genre + \"]\";\n  }\n}\n```\n\nIn the `Library.java` file, you can see references to the getter methods for three string attributes needed for the `Book` class. The method `getTitle()` is referenced on line 51, the method `getAuthor()` is referenced on line 64, and the method `getGenre` is referenced on lines 85 and 98. You should create `private` attributes for `name`, `author`, and `genre`. Getters also need to be created for each attribute.\n\nWhen you print a ArrayList of `Book` objects and you want to a string representation, you need to override the `toString` method.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Object Compsition,"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/exercise4/Exercise4.java",
     "code/advanced/exercise4/Library.java",
     "code/advanced/exercise4/Book.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise4/Exercise4.java"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise4/Library.java"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise4/Book.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a component class"
  }
 },
 {
  "type": "test",
  "taskId": "test-1581249114",
  "source": {
   "name": "advanced topics coding exercise 5",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/advanced/Exercise5Tester.java\",\"className\":\"Exercise5Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/advanced/exercise5\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "### ShoppingCart Class\nHere is one possible solution for the `ShoppingCart` class:\n\n```java\nimport java.util.*;\n\nclass ShoppingCart {\n  private ArrayList<Item> items;\n  private double total;\n  \n  public ShoppingCart() {\n    items = new ArrayList<Item>();\n    total = 0;\n  }\n  \n  public void addItem(Item item) {\n    items.add(item);\n    calculateTotal();\n  }\n  \n  private void calculateTotal() {\n    total = 0;\n    for (Item i : items) {\n      i.calculateSubtotal();\n      total += i.getSubtotal();\n    }\n  }\n  \n  public double getTotal() {\n    return total;\n  }\n  \n  public int getNumItems() {\n    int numItems = 0;\n    for (Item i : items) {\n      numItems += i.getQuantity();\n    }\n    return numItems;\n  }\n  \n  public ArrayList<Item> getItems() {\n    return items;\n  }\n  \n  public String toString() {\n    return getClass().getName() + \"[items=\" + items + \", total=\" + total + \"]\";\n  }\n}\n```\n\n* Don't forget to call `calculateTotal` every time an item is added to the cart.\n* In `calculateTotal` the total for the shopping cart should be updated. So set `total` to 0. Then add up the `subtotal` for each item item in the cart and set this value to `total`.\n* The number of items in the cart is not the length of the ArrayList; that would be how many different kinds of objects are in the shopping cart. We want to know to total number of items in the cart. Sum of the `quantity` attributes for all of the items.\n\n### Item Class\nHere is one possible solution for the `Item` class:\n\n```java\nclass Item {\n  private String name;\n  private double price;\n  private int quantity;\n  private double subtotal;\n  \n  public Item(String n, double p, int q) {\n    name = n;\n    price = p;\n    quantity = q;\n    subtotal = 0;\n  }\n  \n  public int getQuantity() {\n    return quantity;\n  }\n  \n  public void calculateSubtotal() {\n    subtotal = price * quantity;\n  }\n  \n  public double getSubtotal() {\n    return subtotal;\n  }\n  \n  public String toString() {\n    return getClass().getName() + \"[name=\" + name + \", price=\" + price + \", quantity=\" + quantity + \", subtotal=\" + subtotal + \"]\";\n  }\n}\n```\n\n* Since we need to see a string representation of `Item` objects, the `toString` method should be overriden.\n* There also needs to be getter methods for the `subtotal` and `quantity` attributes.",
   "showGuidanceAfterResponse": false,
   "points": 20,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Object Composition"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/exercise5/Exercise5.java",
     "code/advanced/exercise5/Item.java",
     "code/advanced/exercise5/ShoppingCart.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise5/Exercise5.java"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise5/Item.java"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise5/ShoppingCart.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create component and composite classes"
  }
 },
 {
  "type": "test",
  "taskId": "test-485920902",
  "source": {
   "name": "advanced topics coding exercise 1",
   "showName": false,
   "instructions": "Submit your code for evaluation.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"java\",\"subtype\":\"junit\",\"files\":[{\"filePath\":\".guides/secure/advanced/Exercise1Tester.java\",\"className\":\"Exercise1Tester\"}],\"partialPoints\":true,\"maxPoints\":20,\"wd\":\"\",\"sources\":\"code/advanced/exercise1\",\"libs\":\"\",\"testsources\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```java\ninterface Vehicle {\n  String travel();\n}\n\n//add class definitions below this line\n\nclass Car implements Vehicle {\n  private double miles;\n  \n  public Car(double m) {\n    miles = m;\n  }\n  \n  public String travel() {\n    return String.format(\"There is no extra fee to travel %.2f miles.\", miles);\n  }\n}\n\nclass RideShare implements Vehicle {\n  private double miles;\n  private double fee;\n  \n  public RideShare(double m, double f) {\n    miles = m;\n    fee = f;\n  }\n  \n  public String travel() {\n    return String.format(\"It costs $%.2f to travel %.2f miles.\", (fee * miles), miles);\n  }\n}\n\nclass Subway implements Vehicle {\n  private double fare;\n  \n  public Subway(double f) {\n    fare = f;\n  }\n  \n  public String travel() {\n    return String.format(\"$%.2f will get you unlimited use for one day.\", fare);\n  }\n}\n \n//add class definitions above this line\n\npublic class Exercise1 {  \n  public static void main(String[] args) {\n    \n    //add code below this line\n\n    Car c = new Car(10);\n    RideShare rc = new RideShare(20, 0.5);\n    Subway s = new Subway(7.25);\n    \n    System.out.println(c.travel());\n    System.out.println(rc.travel());\n    System.out.println(s.travel());\n\n    //add code above this line\n    \n  }\n}\n```\n\n### Car Class\n* Implement the `Vehicle` interface.\n* Create the `miles` attribute that is of type `double`.\n* Override the `travel` method so that it prints the message with the `miles` attribute.\n* Use `%.2f` to ensure `miles` prints with two decimal places.\n\n### RideShare Class\n* Implement the `Vehicle` interface.\n* Create attributes for `miles` and `fee`. Both are doubles.\n* Override the `travel` method so that it prints a message along with `miles * fee` and `miles`.\n* Use `%.2f` to ensure `miles` prints with two decimal places.\n\n### Subway Class\n* Implement the `Vehicle` interface.\n* Create the `fare` attribute of type `double`.\n* Override the `travel` method so that it prints a message along with `fare`.\n* Use `%.2f` to ensure `miles` prints with two decimal places.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Interfaces"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [
     "code/advanced/exercise1/Exercise1.java"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/advanced/exercise1/Exercise1.java"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create several classes that all inherit from the same interface"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2800255607",
  "source": {
   "name": "advanced topic lab question 1",
   "showName": false,
   "instructions": "## Lab Question\n\nSelect all of the things that must be true in order to use a user-defined class in another file. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "isRandomized": true,
   "answers": [
    {
     "_id": "9d5a52a5-b6df-262a-2c77-f716bd1fae05",
     "correct": false,
     "answer": "The two files have the same name."
    },
    {
     "_id": "b841ce56-9052-4fb1-972c-dc6f344bdaaa",
     "correct": true,
     "answer": "The two files are in the same folder."
    },
    {
     "_id": "bf7604fb-4123-3b87-898a-ea49b306809a",
     "correct": false,
     "answer": "Use the `import` statement."
    },
    {
     "_id": "5b3dcb8b-7b69-9956-d001-48a383aa43dc",
     "correct": true,
     "answer": "The two files are compiled."
    }
   ],
   "guidance": "Both files must be in the same folder and they must both be compiled. Once this happens, Java can use a user-defined class in another file.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     },
     {
      "name": "Content",
      "value": "Importing User-Defined Classes"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT describe how Java is able to use code written in a separate file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1248934826",
  "source": {
   "name": "advanced topic lab question 2",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume you have the array `cats` which is populated with instances of the `Cat` class. You want to invoke the `meow` method on the first element in the array. Select the Java code that would do this.",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "e0ca17c7-1ded-691a-feb8-2a14af1c86ea",
     "correct": true,
     "answer": "cats[0].meow();"
    },
    {
     "_id": "60dfa9fd-98a5-7b92-fced-9c92d45c9b72",
     "correct": false,
     "answer": "cats.meow();"
    },
    {
     "_id": "715d7e42-ea70-a2bc-6f43-e05499988baa",
     "correct": false,
     "answer": "cat.meow()"
    }
   ],
   "guidance": "The correct answer is:\n\n`cats[0].meow();`\n\nRemember, `cats` is an array of objects. You cannot call the `meow` method on an array of `Cat` objects. You need to call the method on a `Cat` object itself. `cats[0]` is a `Cat` object, the other choices are not.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Array of Objects"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT to reference an object in an array of objects"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3612340120",
  "source": {
   "name": "advanced topic lab question 3",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the following code:\n\n```java\nclass Shape {\n  private String name;\n  private int sides;\n  private int length;\n  \n  public Shape(String n, int s, int l) {\n    name = n;\n    sides = s;\n    length = l;\n  }\n}\n\nclass Animation {\n  private int xPosition;\n  private int yPosition;\n  pivate Shape image;\n\n  public Animation(int x, int y, int img) {\n    xPosition = x;\n    yPosition = y;\n    image = img;\n  }\n}\n\nShape myShape = new Shape(\"square\", 4, 50);\nAnimation myAnimation = new Animation(0, 0, myShape);\n```\n\nFill in the blanks below.",
   "showValues": true,
   "text": "The <<<Animation>>> class is the composite class.\nThe <<<Shape>>> class is the component class.",
   "distractors": "",
   "guidance": "A composite class is a class that has another class as an attribute. A component class is a class that is used as an attribute of another class. In the code sample above, the `Animation` class is the composite class, while the `Shape` class is the component class.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "arePartialPointsAllowed": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Composition"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify composite and component classes",
   "tokens": {
    "blank": [
     "Animation",
     "Shape"
    ],
    "text": [
     "The ",
     0,
     " class is the composite class.\nThe ",
     0,
     " class is the component class."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1661160302",
  "source": {
   "name": "advanced topic lab question 4",
   "showName": false,
   "instructions": "## Lab Question\n\nDrag the code blocks into the box below. Create the interface `Cat`, which has the methods `meow` and `sleep`. **Hint**, not all of the blocks will be used, and the blocks must be properly indented.",
   "initial": "interface Cat {\n  String meow();\n  String sleep();\n}\npublic String meow(); #distractor\npublic String sleep(); #distractor\nString meow() { #distractor\nString sleep() { #distractor\nabstract interface Cat { #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The correct answer is:\n\n```java\ninterface Cat {\n  String meow();\n  String sleep();\n}\n```\n\n* Interfaces do not use the keyword `abstract`.\n* Interface methods are designed to be used by subclasses. They are `public` by default and to not need an access modifier.\n* Interface methods are empty. They do not need curly brackets `{` when defining a method without code.",
   "showGuidanceAfterResponse": true,
   "points": 20,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Interfaces"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define an interface"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-558474011",
  "source": {
   "name": "advanced topic lab question 5",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the following code:\n\n```java\nclass Alpha {\n  private int number;\n\n  public Alpha(int n) {\n    number = n;\n  }\n}\n```\n\nWhich code snippet below allows you to check if the `number` attribute between two `Alpha` objects are equal?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "38a20a4f-8ce6-4541-5d82-48e01039b13c",
     "correct": true,
     "answer": "```java\npublic boolean equals(Alpha other) {\n  return number == other.number;\n}\n```"
    },
    {
     "_id": "ebfa30ff-0039-b560-db8b-4b2e21062555",
     "correct": false,
     "answer": "```java\npublic void equals(Alpha other) {\n  return number == other.number;\n}\n```"
    },
    {
     "_id": "405769e5-901f-1bfd-26c2-148ca1e2d0e5",
     "correct": false,
     "answer": "```java\npublic boolean equals() {\n  return number == number;\n}\n```"
    },
    {
     "_id": "74b83bff-f5ed-9699-aa04-b424a48515bf",
     "correct": false,
     "answer": "```java\npublic boolean equals(Alpha other) {\n  return number == Alpha.number;\n}\n```"
    }
   ],
   "guidance": "The correct answer is:\n\n```java\npublic boolean equals(Alpha other) {\n  return number == other.number;\n}\n```\n\n* The `equals` method requires an argument of another `Alpha` object.\n* The `equals` method should return a boolean value.\n* Use `other.number` to represent the `number` attribute from the other `Alpha` object.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Object Equality"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT override the equals method to compare two attributes between objects"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3905612445",
  "source": {
   "name": "advanced topic lab question 6",
   "showName": false,
   "instructions": "## Lab Question\n\nWhen creating the `toString` method, why is it a good idea to use `getClass().getName()`?",
   "multipleResponse": false,
   "isRandomized": true,
   "answers": [
    {
     "_id": "fe21db62-0689-20f0-e0d8-a2d2e68bb09d",
     "correct": true,
     "answer": "Because the `toString` method will print the proper class name when used by a subclass."
    },
    {
     "_id": "bfd1eca0-ac26-7877-30df-ff590ad90591",
     "correct": false,
     "answer": "Java will throw an error message if you do not."
    },
    {
     "_id": "a269f5d6-6c59-434f-8a69-759d21c2e916",
     "correct": false,
     "answer": "That is the only way to print the name of a class."
    }
   ],
   "guidance": "Using `getClass().getName()` allows a subclass to print the proper class name. This means you do not have to override the `toString` method for the subclass.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 20,
   "incorrectPoints": 0,
   "arePartialPointsAllowed": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Represent an Object as a String"
     },
     {
      "name": "Programming Language",
      "value": "Java"
     },
     {
      "name": "Category",
      "value": "Advanced Topics"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT explain the benefit of using getClass().getName()"
  }
 }
]